
ex4_interp_timer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000012d4  00400000  00400000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000034  20400000  004012d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000b8  20400034  00401308  00020034  2**2
                  ALLOC
  3 .heap         00000204  204000ec  004013c0  00020034  2**0
                  ALLOC
  4 .stack        00000400  204002f0  004015c4  00020034  2**0
                  ALLOC
  5 .ARM.attributes 0000002e  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  00020062  2**0
                  CONTENTS, READONLY
  7 .debug_info   0000db94  00000000  00000000  000200bb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000021f1  00000000  00000000  0002dc4f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00004cd0  00000000  00000000  0002fe40  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000690  00000000  00000000  00034b10  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000005c0  00000000  00000000  000351a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0003c7aa  00000000  00000000  00035760  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000db62  00000000  00000000  00071f0a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    001446b3  00000000  00000000  0007fa6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00001074  00000000  00000000  001c4120  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	f0 06 40 20 e5 01 40 00 e1 01 40 00 e1 01 40 00     ..@ ..@...@...@.
  400010:	e1 01 40 00 e1 01 40 00 e1 01 40 00 00 00 00 00     ..@...@...@.....
	...
  40002c:	e1 01 40 00 e1 01 40 00 00 00 00 00 e1 01 40 00     ..@...@.......@.
  40003c:	e1 01 40 00 e1 01 40 00 e1 01 40 00 e1 01 40 00     ..@...@...@...@.
  40004c:	e1 01 40 00 e1 01 40 00 e1 01 40 00 e1 01 40 00     ..@...@...@...@.
  40005c:	e1 01 40 00 e1 01 40 00 00 00 00 00 e1 01 40 00     ..@...@.......@.
  40006c:	e1 01 40 00 e1 01 40 00 e1 01 40 00 4d 11 40 00     ..@...@...@.M.@.
  40007c:	e1 01 40 00 e1 01 40 00 e1 01 40 00 e1 01 40 00     ..@...@...@...@.
  40008c:	e1 01 40 00 e1 01 40 00 e1 01 40 00 e1 01 40 00     ..@...@...@...@.
  40009c:	8d 0d 40 00 e1 01 40 00 e1 01 40 00 e1 01 40 00     ..@...@...@...@.
  4000ac:	e1 01 40 00 e1 01 40 00 e1 01 40 00 e1 01 40 00     ..@...@...@...@.
  4000bc:	e1 01 40 00 e1 01 40 00 e1 01 40 00 e1 01 40 00     ..@...@...@...@.
  4000cc:	e1 01 40 00 e1 01 40 00 e1 01 40 00 e1 01 40 00     ..@...@...@...@.
  4000dc:	e1 01 40 00 e1 01 40 00 e1 01 40 00 e1 01 40 00     ..@...@...@...@.
  4000ec:	e1 01 40 00 e1 01 40 00 e1 01 40 00 e1 01 40 00     ..@...@...@...@.
  4000fc:	e1 01 40 00 e1 01 40 00 e1 01 40 00 e1 01 40 00     ..@...@...@...@.
  40010c:	e1 01 40 00 e1 01 40 00 e1 01 40 00 00 00 00 00     ..@...@...@.....
  40011c:	00 00 00 00 e1 01 40 00 e1 01 40 00 e1 01 40 00     ......@...@...@.
  40012c:	e1 01 40 00 e1 01 40 00 e1 01 40 00 e1 01 40 00     ..@...@...@...@.
  40013c:	e1 01 40 00 e1 01 40 00 e1 01 40 00 e1 01 40 00     ..@...@...@...@.
  40014c:	e1 01 40 00 e1 01 40 00 e1 01 40 00 e1 01 40 00     ..@...@...@...@.
  40015c:	e1 01 40 00 e1 01 40 00 e1 01 40 00                 ..@...@...@.

00400168 <__do_global_dtors_aux>:
  400168:	b510      	push	{r4, lr}
  40016a:	4c05      	ldr	r4, [pc, #20]	; (400180 <__do_global_dtors_aux+0x18>)
  40016c:	7823      	ldrb	r3, [r4, #0]
  40016e:	b933      	cbnz	r3, 40017e <__do_global_dtors_aux+0x16>
  400170:	4b04      	ldr	r3, [pc, #16]	; (400184 <__do_global_dtors_aux+0x1c>)
  400172:	b113      	cbz	r3, 40017a <__do_global_dtors_aux+0x12>
  400174:	4804      	ldr	r0, [pc, #16]	; (400188 <__do_global_dtors_aux+0x20>)
  400176:	f3af 8000 	nop.w
  40017a:	2301      	movs	r3, #1
  40017c:	7023      	strb	r3, [r4, #0]
  40017e:	bd10      	pop	{r4, pc}
  400180:	20400034 	.word	0x20400034
  400184:	00000000 	.word	0x00000000
  400188:	004012d4 	.word	0x004012d4

0040018c <frame_dummy>:
  40018c:	4b0c      	ldr	r3, [pc, #48]	; (4001c0 <frame_dummy+0x34>)
  40018e:	b143      	cbz	r3, 4001a2 <frame_dummy+0x16>
  400190:	480c      	ldr	r0, [pc, #48]	; (4001c4 <frame_dummy+0x38>)
  400192:	490d      	ldr	r1, [pc, #52]	; (4001c8 <frame_dummy+0x3c>)
  400194:	b510      	push	{r4, lr}
  400196:	f3af 8000 	nop.w
  40019a:	480c      	ldr	r0, [pc, #48]	; (4001cc <frame_dummy+0x40>)
  40019c:	6803      	ldr	r3, [r0, #0]
  40019e:	b923      	cbnz	r3, 4001aa <frame_dummy+0x1e>
  4001a0:	bd10      	pop	{r4, pc}
  4001a2:	480a      	ldr	r0, [pc, #40]	; (4001cc <frame_dummy+0x40>)
  4001a4:	6803      	ldr	r3, [r0, #0]
  4001a6:	b933      	cbnz	r3, 4001b6 <frame_dummy+0x2a>
  4001a8:	4770      	bx	lr
  4001aa:	4b09      	ldr	r3, [pc, #36]	; (4001d0 <frame_dummy+0x44>)
  4001ac:	2b00      	cmp	r3, #0
  4001ae:	d0f7      	beq.n	4001a0 <frame_dummy+0x14>
  4001b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  4001b4:	4718      	bx	r3
  4001b6:	4b06      	ldr	r3, [pc, #24]	; (4001d0 <frame_dummy+0x44>)
  4001b8:	2b00      	cmp	r3, #0
  4001ba:	d0f5      	beq.n	4001a8 <frame_dummy+0x1c>
  4001bc:	4718      	bx	r3
  4001be:	bf00      	nop
  4001c0:	00000000 	.word	0x00000000
  4001c4:	004012d4 	.word	0x004012d4
  4001c8:	20400038 	.word	0x20400038
  4001cc:	004012d4 	.word	0x004012d4
  4001d0:	00000000 	.word	0x00000000

004001d4 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
  4001d4:	b508      	push	{r3, lr}
	system_init();
  4001d6:	4b01      	ldr	r3, [pc, #4]	; (4001dc <atmel_start_init+0x8>)
  4001d8:	4798      	blx	r3
  4001da:	bd08      	pop	{r3, pc}
  4001dc:	00400329 	.word	0x00400329

004001e0 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  4001e0:	e7fe      	b.n	4001e0 <Dummy_Handler>
	...

004001e4 <Reset_Handler>:
{
  4001e4:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
  4001e6:	4b10      	ldr	r3, [pc, #64]	; (400228 <Reset_Handler+0x44>)
  4001e8:	4a10      	ldr	r2, [pc, #64]	; (40022c <Reset_Handler+0x48>)
  4001ea:	429a      	cmp	r2, r3
  4001ec:	d009      	beq.n	400202 <Reset_Handler+0x1e>
  4001ee:	4b0e      	ldr	r3, [pc, #56]	; (400228 <Reset_Handler+0x44>)
  4001f0:	4a0e      	ldr	r2, [pc, #56]	; (40022c <Reset_Handler+0x48>)
  4001f2:	e003      	b.n	4001fc <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
  4001f4:	6811      	ldr	r1, [r2, #0]
  4001f6:	6019      	str	r1, [r3, #0]
  4001f8:	3304      	adds	r3, #4
  4001fa:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
  4001fc:	490c      	ldr	r1, [pc, #48]	; (400230 <Reset_Handler+0x4c>)
  4001fe:	428b      	cmp	r3, r1
  400200:	d3f8      	bcc.n	4001f4 <Reset_Handler+0x10>
                        *pDest++ = *pSrc++;
  400202:	4b0c      	ldr	r3, [pc, #48]	; (400234 <Reset_Handler+0x50>)
  400204:	e002      	b.n	40020c <Reset_Handler+0x28>
                *pDest++ = 0;
  400206:	2200      	movs	r2, #0
  400208:	601a      	str	r2, [r3, #0]
  40020a:	3304      	adds	r3, #4
        for (pDest = &_szero; pDest < &_ezero;) {
  40020c:	4a0a      	ldr	r2, [pc, #40]	; (400238 <Reset_Handler+0x54>)
  40020e:	4293      	cmp	r3, r2
  400210:	d3f9      	bcc.n	400206 <Reset_Handler+0x22>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  400212:	4a0a      	ldr	r2, [pc, #40]	; (40023c <Reset_Handler+0x58>)
  400214:	4b0a      	ldr	r3, [pc, #40]	; (400240 <Reset_Handler+0x5c>)
  400216:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  40021a:	6093      	str	r3, [r2, #8]
        __libc_init_array();
  40021c:	4b09      	ldr	r3, [pc, #36]	; (400244 <Reset_Handler+0x60>)
  40021e:	4798      	blx	r3
        main();
  400220:	4b09      	ldr	r3, [pc, #36]	; (400248 <Reset_Handler+0x64>)
  400222:	4798      	blx	r3
  400224:	e7fe      	b.n	400224 <Reset_Handler+0x40>
  400226:	bf00      	nop
  400228:	20400000 	.word	0x20400000
  40022c:	004012d4 	.word	0x004012d4
  400230:	20400034 	.word	0x20400034
  400234:	20400034 	.word	0x20400034
  400238:	204000ec 	.word	0x204000ec
  40023c:	e000ed00 	.word	0xe000ed00
  400240:	00400000 	.word	0x00400000
  400244:	00401161 	.word	0x00401161
  400248:	00400431 	.word	0x00400431

0040024c <TIMER_0_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_0_init(void)
{
  40024c:	b508      	push	{r3, lr}
}

static inline hri_pmc_pcsr0_reg_t hri_pmc_get_PCSR0_reg(const void *const hw, hri_pmc_pcsr0_reg_t mask)
{
	uint32_t tmp;
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  40024e:	4b08      	ldr	r3, [pc, #32]	; (400270 <TIMER_0_init+0x24>)
  400250:	699b      	ldr	r3, [r3, #24]
 *
 */
static inline void _pmc_enable_periph_clock(uint32_t periph_id)
{
	if (periph_id < 32) {
		if (!hri_pmc_get_PCSR0_reg(PMC, (1 << periph_id))) {
  400252:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
  400256:	d103      	bne.n	400260 <TIMER_0_init+0x14>
	((Pmc *)hw)->PMC_PCER0 = mask;
  400258:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
  40025c:	4b04      	ldr	r3, [pc, #16]	; (400270 <TIMER_0_init+0x24>)
  40025e:	611a      	str	r2, [r3, #16]
	_pmc_enable_periph_clock(ID_TC0_CHANNEL0);
	TIMER_0_PORT_init();
	timer_init(&TIMER_0, TC0, _tc_get_timer());
  400260:	4b04      	ldr	r3, [pc, #16]	; (400274 <TIMER_0_init+0x28>)
  400262:	4798      	blx	r3
  400264:	4602      	mov	r2, r0
  400266:	4904      	ldr	r1, [pc, #16]	; (400278 <TIMER_0_init+0x2c>)
  400268:	4804      	ldr	r0, [pc, #16]	; (40027c <TIMER_0_init+0x30>)
  40026a:	4b05      	ldr	r3, [pc, #20]	; (400280 <TIMER_0_init+0x34>)
  40026c:	4798      	blx	r3
  40026e:	bd08      	pop	{r3, pc}
  400270:	400e0600 	.word	0x400e0600
  400274:	00400d89 	.word	0x00400d89
  400278:	4000c000 	.word	0x4000c000
  40027c:	204000d0 	.word	0x204000d0
  400280:	004005d9 	.word	0x004005d9

00400284 <EDBG_COM_CLOCK_init>:
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  400284:	4b04      	ldr	r3, [pc, #16]	; (400298 <EDBG_COM_CLOCK_init+0x14>)
  400286:	699b      	ldr	r3, [r3, #24]
  400288:	f413 4f80 	tst.w	r3, #16384	; 0x4000
  40028c:	d103      	bne.n	400296 <EDBG_COM_CLOCK_init+0x12>
	((Pmc *)hw)->PMC_PCER0 = mask;
  40028e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  400292:	4b01      	ldr	r3, [pc, #4]	; (400298 <EDBG_COM_CLOCK_init+0x14>)
  400294:	611a      	str	r2, [r3, #16]
  400296:	4770      	bx	lr
  400298:	400e0600 	.word	0x400e0600

0040029c <EDBG_COM_PORT_init>:
}

static inline void hri_pio_clear_ABCDSR_reg(const void *const hw, uint8_t index, hri_pio_abcdsr_reg_t mask)
{
	PIO_CRITICAL_SECTION_ENTER();
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  40029c:	4b0f      	ldr	r3, [pc, #60]	; (4002dc <EDBG_COM_PORT_init+0x40>)
  40029e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  4002a0:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  4002a4:	671a      	str	r2, [r3, #112]	; 0x70
  4002a6:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  4002a8:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  4002ac:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  4002ae:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  4002b2:	605a      	str	r2, [r3, #4]
}

static inline void hri_matrix_set_CCFG_SYSIO_reg(const void *const hw, hri_matrix_ccfg_sysio_reg_t mask)
{
	MATRIX_CRITICAL_SECTION_ENTER();
	((Matrix *)hw)->CCFG_SYSIO |= mask;
  4002b4:	4a0a      	ldr	r2, [pc, #40]	; (4002e0 <EDBG_COM_PORT_init+0x44>)
  4002b6:	f8d2 3114 	ldr.w	r3, [r2, #276]	; 0x114
  4002ba:	f043 0310 	orr.w	r3, r3, #16
  4002be:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  4002c2:	4b08      	ldr	r3, [pc, #32]	; (4002e4 <EDBG_COM_PORT_init+0x48>)
  4002c4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  4002c6:	f042 0210 	orr.w	r2, r2, #16
  4002ca:	671a      	str	r2, [r3, #112]	; 0x70
  4002cc:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  4002ce:	f042 0210 	orr.w	r2, r2, #16
  4002d2:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  4002d4:	2210      	movs	r2, #16
  4002d6:	605a      	str	r2, [r3, #4]
  4002d8:	4770      	bx	lr
  4002da:	bf00      	nop
  4002dc:	400e0e00 	.word	0x400e0e00
  4002e0:	40088000 	.word	0x40088000
  4002e4:	400e1000 	.word	0x400e1000

004002e8 <EDBG_COM_init>:
 * \brief USART initialization function
 *
 * Enables USART peripheral, clocks and initializes USART driver
 */
void EDBG_COM_init(void)
{
  4002e8:	b510      	push	{r4, lr}
  4002ea:	b082      	sub	sp, #8
	EDBG_COM_CLOCK_init();
  4002ec:	4b07      	ldr	r3, [pc, #28]	; (40030c <EDBG_COM_init+0x24>)
  4002ee:	4798      	blx	r3
	EDBG_COM_PORT_init();
  4002f0:	4b07      	ldr	r3, [pc, #28]	; (400310 <EDBG_COM_init+0x28>)
  4002f2:	4798      	blx	r3
	usart_async_init(&EDBG_COM, USART1, EDBG_COM_buffer, EDBG_COM_BUFFER_SIZE, _usart_get_usart_async());
  4002f4:	4b07      	ldr	r3, [pc, #28]	; (400314 <EDBG_COM_init+0x2c>)
  4002f6:	4798      	blx	r3
  4002f8:	9000      	str	r0, [sp, #0]
  4002fa:	2310      	movs	r3, #16
  4002fc:	4a06      	ldr	r2, [pc, #24]	; (400318 <EDBG_COM_init+0x30>)
  4002fe:	4907      	ldr	r1, [pc, #28]	; (40031c <EDBG_COM_init+0x34>)
  400300:	4807      	ldr	r0, [pc, #28]	; (400320 <EDBG_COM_init+0x38>)
  400302:	4c08      	ldr	r4, [pc, #32]	; (400324 <EDBG_COM_init+0x3c>)
  400304:	47a0      	blx	r4
}
  400306:	b002      	add	sp, #8
  400308:	bd10      	pop	{r4, pc}
  40030a:	bf00      	nop
  40030c:	00400285 	.word	0x00400285
  400310:	0040029d 	.word	0x0040029d
  400314:	00401149 	.word	0x00401149
  400318:	20400050 	.word	0x20400050
  40031c:	40028000 	.word	0x40028000
  400320:	20400080 	.word	0x20400080
  400324:	0040084d 	.word	0x0040084d

00400328 <system_init>:

void system_init(void)
{
  400328:	b508      	push	{r3, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
  40032a:	4b0d      	ldr	r3, [pc, #52]	; (400360 <system_init+0x38>)
  40032c:	4798      	blx	r3
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  40032e:	4b0d      	ldr	r3, [pc, #52]	; (400364 <system_init+0x3c>)
  400330:	699b      	ldr	r3, [r3, #24]
  400332:	f413 6f80 	tst.w	r3, #1024	; 0x400
  400336:	d103      	bne.n	400340 <system_init+0x18>
	((Pmc *)hw)->PMC_PCER0 = mask;
  400338:	f44f 6280 	mov.w	r2, #1024	; 0x400
  40033c:	4b09      	ldr	r3, [pc, #36]	; (400364 <system_init+0x3c>)
  40033e:	611a      	str	r2, [r3, #16]
}

static inline void hri_wdt_set_MR_WDDIS_bit(const void *const hw)
{
	WDT_CRITICAL_SECTION_ENTER();
	((Wdt *)hw)->WDT_MR |= WDT_MR_WDDIS;
  400340:	4a09      	ldr	r2, [pc, #36]	; (400368 <system_init+0x40>)
  400342:	6853      	ldr	r3, [r2, #4]
  400344:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
  400348:	6053      	str	r3, [r2, #4]
	((Pio *)hw)->PIO_SODR = mask;
  40034a:	4b08      	ldr	r3, [pc, #32]	; (40036c <system_init+0x44>)
  40034c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
  400350:	631a      	str	r2, [r3, #48]	; 0x30
	((Pio *)hw)->PIO_OER = mask;
  400352:	611a      	str	r2, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  400354:	601a      	str	r2, [r3, #0]
	// Set pin direction to output
	gpio_set_pin_direction(LED0, GPIO_DIRECTION_OUT);

	gpio_set_pin_function(LED0, GPIO_PIN_FUNCTION_OFF);

	TIMER_0_init();
  400356:	4b06      	ldr	r3, [pc, #24]	; (400370 <system_init+0x48>)
  400358:	4798      	blx	r3
	EDBG_COM_init();
  40035a:	4b06      	ldr	r3, [pc, #24]	; (400374 <system_init+0x4c>)
  40035c:	4798      	blx	r3
  40035e:	bd08      	pop	{r3, pc}
  400360:	00400b39 	.word	0x00400b39
  400364:	400e0600 	.word	0x400e0600
  400368:	400e1850 	.word	0x400e1850
  40036c:	400e0e00 	.word	0x400e0e00
  400370:	0040024d 	.word	0x0040024d
  400374:	004002e9 	.word	0x004002e9

00400378 <tx_cb_EDBG_COM>:
	tmp = ((Pio *)hw)->PIO_ODSR;
  400378:	4a04      	ldr	r2, [pc, #16]	; (40038c <tx_cb_EDBG_COM+0x14>)
  40037a:	6b93      	ldr	r3, [r2, #56]	; 0x38
	tmp &= mask;
  40037c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
{
	uint32_t    bits_clear, bits_set;
	void *const hw = port_to_reg(port);

	bits_clear = hri_pio_get_ODSR_reg(hw, mask);
	bits_set   = (~bits_clear) & mask;
  400380:	43d9      	mvns	r1, r3
  400382:	f401 0100 	and.w	r1, r1, #8388608	; 0x800000
	((Pio *)hw)->PIO_SODR = mask;
  400386:	6311      	str	r1, [r2, #48]	; 0x30
	((Pio *)hw)->PIO_CODR = mask;
  400388:	6353      	str	r3, [r2, #52]	; 0x34
  40038a:	4770      	bx	lr
  40038c:	400e0e00 	.word	0x400e0e00

00400390 <rx_cb_EDBG_COM>:
}

static void rx_cb_EDBG_COM(const struct usart_async_descriptor *const io_descr)
{
	/* Receive completed */
	data_arrived = 1;
  400390:	2201      	movs	r2, #1
  400392:	4b01      	ldr	r3, [pc, #4]	; (400398 <rx_cb_EDBG_COM+0x8>)
  400394:	601a      	str	r2, [r3, #0]
  400396:	4770      	bx	lr
  400398:	20400060 	.word	0x20400060

0040039c <TIMER_0_task_cb>:


struct timer_descriptor       TIMER_0;
volatile static struct timer_task    TIMER_0_task;

static void TIMER_0_task_cb(const struct timer_task *const timer_task){
  40039c:	b508      	push	{r3, lr}
	io_write(&EDBG_COM.io, "\r\nInterruption!\r\n", 21);
  40039e:	2215      	movs	r2, #21
  4003a0:	4902      	ldr	r1, [pc, #8]	; (4003ac <TIMER_0_task_cb+0x10>)
  4003a2:	4803      	ldr	r0, [pc, #12]	; (4003b0 <TIMER_0_task_cb+0x14>)
  4003a4:	4b03      	ldr	r3, [pc, #12]	; (4003b4 <TIMER_0_task_cb+0x18>)
  4003a6:	4798      	blx	r3
  4003a8:	bd08      	pop	{r3, pc}
  4003aa:	bf00      	nop
  4003ac:	004011b8 	.word	0x004011b8
  4003b0:	20400080 	.word	0x20400080
  4003b4:	004004f1 	.word	0x004004f1

004003b8 <err_cb_EDBG_COM>:
{
  4003b8:	b508      	push	{r3, lr}
	io_write(&EDBG_COM.io, start_message, 12);
  4003ba:	220c      	movs	r2, #12
  4003bc:	4902      	ldr	r1, [pc, #8]	; (4003c8 <err_cb_EDBG_COM+0x10>)
  4003be:	4803      	ldr	r0, [pc, #12]	; (4003cc <err_cb_EDBG_COM+0x14>)
  4003c0:	4b03      	ldr	r3, [pc, #12]	; (4003d0 <err_cb_EDBG_COM+0x18>)
  4003c2:	4798      	blx	r3
  4003c4:	bd08      	pop	{r3, pc}
  4003c6:	bf00      	nop
  4003c8:	20400000 	.word	0x20400000
  4003cc:	20400080 	.word	0x20400080
  4003d0:	004004f1 	.word	0x004004f1

004003d4 <put_char>:
{
  4003d4:	b500      	push	{lr}
  4003d6:	b083      	sub	sp, #12
  4003d8:	f88d 0007 	strb.w	r0, [sp, #7]
	while (io_write(&EDBG_COM.io, &c, 1) != 1) {
  4003dc:	2201      	movs	r2, #1
  4003de:	f10d 0107 	add.w	r1, sp, #7
  4003e2:	4807      	ldr	r0, [pc, #28]	; (400400 <put_char+0x2c>)
  4003e4:	4b07      	ldr	r3, [pc, #28]	; (400404 <put_char+0x30>)
  4003e6:	4798      	blx	r3
  4003e8:	2801      	cmp	r0, #1
  4003ea:	d1f7      	bne.n	4003dc <put_char+0x8>
	if( usart_async_get_status(&EDBG_COM.io, NULL) == ERR_NONE)
  4003ec:	2100      	movs	r1, #0
  4003ee:	4804      	ldr	r0, [pc, #16]	; (400400 <put_char+0x2c>)
  4003f0:	4b05      	ldr	r3, [pc, #20]	; (400408 <put_char+0x34>)
  4003f2:	4798      	blx	r3
  4003f4:	2800      	cmp	r0, #0
  4003f6:	d1f9      	bne.n	4003ec <put_char+0x18>
}
  4003f8:	b003      	add	sp, #12
  4003fa:	f85d fb04 	ldr.w	pc, [sp], #4
  4003fe:	bf00      	nop
  400400:	20400080 	.word	0x20400080
  400404:	004004f1 	.word	0x004004f1
  400408:	00400981 	.word	0x00400981

0040040c <print>:
{
  40040c:	b538      	push	{r3, r4, r5, lr}
  40040e:	4605      	mov	r5, r0
	for(int i = 0 ; i < strlen(msg); i++ )
  400410:	2400      	movs	r4, #0
  400412:	e003      	b.n	40041c <print+0x10>
	put_char( msg[i] );
  400414:	5d28      	ldrb	r0, [r5, r4]
  400416:	4b04      	ldr	r3, [pc, #16]	; (400428 <print+0x1c>)
  400418:	4798      	blx	r3
	for(int i = 0 ; i < strlen(msg); i++ )
  40041a:	3401      	adds	r4, #1
  40041c:	4628      	mov	r0, r5
  40041e:	4b03      	ldr	r3, [pc, #12]	; (40042c <print+0x20>)
  400420:	4798      	blx	r3
  400422:	42a0      	cmp	r0, r4
  400424:	d8f6      	bhi.n	400414 <print+0x8>
}
  400426:	bd38      	pop	{r3, r4, r5, pc}
  400428:	004003d5 	.word	0x004003d5
  40042c:	004011a9 	.word	0x004011a9

00400430 <main>:
}

int main(void)
{
  400430:	b508      	push	{r3, lr}
	uint8_t recv_char;
	
	atmel_start_init();
  400432:	4b17      	ldr	r3, [pc, #92]	; (400490 <main+0x60>)
  400434:	4798      	blx	r3

	usart_async_register_callback(&EDBG_COM, USART_ASYNC_TXC_CB, tx_cb_EDBG_COM);
  400436:	4c17      	ldr	r4, [pc, #92]	; (400494 <main+0x64>)
  400438:	4a17      	ldr	r2, [pc, #92]	; (400498 <main+0x68>)
  40043a:	2101      	movs	r1, #1
  40043c:	4620      	mov	r0, r4
  40043e:	4d17      	ldr	r5, [pc, #92]	; (40049c <main+0x6c>)
  400440:	47a8      	blx	r5
	usart_async_register_callback(&EDBG_COM, USART_ASYNC_RXC_CB, rx_cb_EDBG_COM);
  400442:	4a17      	ldr	r2, [pc, #92]	; (4004a0 <main+0x70>)
  400444:	2100      	movs	r1, #0
  400446:	4620      	mov	r0, r4
  400448:	47a8      	blx	r5
	usart_async_register_callback(&EDBG_COM, USART_ASYNC_ERROR_CB, err_cb_EDBG_COM);
  40044a:	4a16      	ldr	r2, [pc, #88]	; (4004a4 <main+0x74>)
  40044c:	2102      	movs	r1, #2
  40044e:	4620      	mov	r0, r4
  400450:	47a8      	blx	r5
	usart_async_enable(&EDBG_COM);
  400452:	4620      	mov	r0, r4
  400454:	4b14      	ldr	r3, [pc, #80]	; (4004a8 <main+0x78>)
  400456:	4798      	blx	r3

	io_write(&EDBG_COM.io, start_message, 13);
  400458:	220d      	movs	r2, #13
  40045a:	4914      	ldr	r1, [pc, #80]	; (4004ac <main+0x7c>)
  40045c:	4620      	mov	r0, r4
  40045e:	4b14      	ldr	r3, [pc, #80]	; (4004b0 <main+0x80>)
  400460:	4798      	blx	r3
	print("\r\n");
  400462:	4814      	ldr	r0, [pc, #80]	; (4004b4 <main+0x84>)
  400464:	4b14      	ldr	r3, [pc, #80]	; (4004b8 <main+0x88>)
  400466:	4798      	blx	r3

	TIMER_0_task.interval = 100;
  400468:	4914      	ldr	r1, [pc, #80]	; (4004bc <main+0x8c>)
  40046a:	2364      	movs	r3, #100	; 0x64
  40046c:	60cb      	str	r3, [r1, #12]
	TIMER_0_task.cb = TIMER_0_task_cb;
  40046e:	4b14      	ldr	r3, [pc, #80]	; (4004c0 <main+0x90>)
  400470:	610b      	str	r3, [r1, #16]
	TIMER_0_task.mode = TIMER_TASK_REPEAT;
  400472:	2301      	movs	r3, #1
  400474:	750b      	strb	r3, [r1, #20]
	timer_add_task(&TIMER_0, &TIMER_0_task);
  400476:	4c13      	ldr	r4, [pc, #76]	; (4004c4 <main+0x94>)
  400478:	3104      	adds	r1, #4
  40047a:	4620      	mov	r0, r4
  40047c:	4b12      	ldr	r3, [pc, #72]	; (4004c8 <main+0x98>)
  40047e:	4798      	blx	r3
	timer_start(&TIMER_0);
  400480:	4620      	mov	r0, r4
  400482:	4b12      	ldr	r3, [pc, #72]	; (4004cc <main+0x9c>)
  400484:	4798      	blx	r3

	while (1) {
		print("within loop...\r\n");
  400486:	4812      	ldr	r0, [pc, #72]	; (4004d0 <main+0xa0>)
  400488:	4b0b      	ldr	r3, [pc, #44]	; (4004b8 <main+0x88>)
  40048a:	4798      	blx	r3
  40048c:	e7fb      	b.n	400486 <main+0x56>
  40048e:	bf00      	nop
  400490:	004001d5 	.word	0x004001d5
  400494:	20400080 	.word	0x20400080
  400498:	00400379 	.word	0x00400379
  40049c:	0040090d 	.word	0x0040090d
  4004a0:	00400391 	.word	0x00400391
  4004a4:	004003b9 	.word	0x004003b9
  4004a8:	004008e1 	.word	0x004008e1
  4004ac:	20400000 	.word	0x20400000
  4004b0:	004004f1 	.word	0x004004f1
  4004b4:	004011d0 	.word	0x004011d0
  4004b8:	0040040d 	.word	0x0040040d
  4004bc:	20400060 	.word	0x20400060
  4004c0:	0040039d 	.word	0x0040039d
  4004c4:	204000d0 	.word	0x204000d0
  4004c8:	00400651 	.word	0x00400651
  4004cc:	00400615 	.word	0x00400615
  4004d0:	004011d4 	.word	0x004011d4

004004d4 <atomic_enter_critical>:
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
  4004d4:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
  4004d8:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
  4004da:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
  4004dc:	f3bf 8f5f 	dmb	sy
  4004e0:	4770      	bx	lr

004004e2 <atomic_leave_critical>:
  4004e2:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
  4004e6:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
  4004e8:	f383 8810 	msr	PRIMASK, r3
  4004ec:	4770      	bx	lr
	...

004004f0 <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
  4004f0:	b570      	push	{r4, r5, r6, lr}
  4004f2:	4616      	mov	r6, r2
	ASSERT(io_descr && buf);
  4004f4:	4604      	mov	r4, r0
  4004f6:	460d      	mov	r5, r1
  4004f8:	2800      	cmp	r0, #0
  4004fa:	bf18      	it	ne
  4004fc:	2900      	cmpne	r1, #0
  4004fe:	bf14      	ite	ne
  400500:	2001      	movne	r0, #1
  400502:	2000      	moveq	r0, #0
  400504:	2234      	movs	r2, #52	; 0x34
  400506:	4904      	ldr	r1, [pc, #16]	; (400518 <io_write+0x28>)
  400508:	4b04      	ldr	r3, [pc, #16]	; (40051c <io_write+0x2c>)
  40050a:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
  40050c:	6823      	ldr	r3, [r4, #0]
  40050e:	4632      	mov	r2, r6
  400510:	4629      	mov	r1, r5
  400512:	4620      	mov	r0, r4
  400514:	4798      	blx	r3
}
  400516:	bd70      	pop	{r4, r5, r6, pc}
  400518:	004011e8 	.word	0x004011e8
  40051c:	004009cd 	.word	0x004009cd

00400520 <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
  400520:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
	return (void *)list->head;
  400522:	6807      	ldr	r7, [r0, #0]
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);

	if (!head) {
  400524:	b117      	cbz	r7, 40052c <timer_add_timer_task+0xc>
  400526:	463c      	mov	r4, r7
  400528:	2600      	movs	r6, #0
  40052a:	e00b      	b.n	400544 <timer_add_timer_task+0x24>
		list_insert_as_head(list, new_task);
  40052c:	4b0e      	ldr	r3, [pc, #56]	; (400568 <timer_add_timer_task+0x48>)
  40052e:	4798      	blx	r3
		return;
  400530:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		uint32_t time_left;

		if (it->time_label <= time) {
			time_left = it->interval - (time - it->time_label);
		} else {
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
  400532:	68a5      	ldr	r5, [r4, #8]
  400534:	442b      	add	r3, r5
  400536:	1a9b      	subs	r3, r3, r2
  400538:	3301      	adds	r3, #1
		}
		if (time_left >= new_task->interval)
  40053a:	688d      	ldr	r5, [r1, #8]
  40053c:	42ab      	cmp	r3, r5
  40053e:	d209      	bcs.n	400554 <timer_add_timer_task+0x34>
			break;
		prev = it;
  400540:	4626      	mov	r6, r4
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
  400542:	6824      	ldr	r4, [r4, #0]
  400544:	b134      	cbz	r4, 400554 <timer_add_timer_task+0x34>
		if (it->time_label <= time) {
  400546:	6863      	ldr	r3, [r4, #4]
  400548:	4293      	cmp	r3, r2
  40054a:	d8f2      	bhi.n	400532 <timer_add_timer_task+0x12>
			time_left = it->interval - (time - it->time_label);
  40054c:	68a5      	ldr	r5, [r4, #8]
  40054e:	1a9b      	subs	r3, r3, r2
  400550:	442b      	add	r3, r5
  400552:	e7f2      	b.n	40053a <timer_add_timer_task+0x1a>
	}

	if (it == head) {
  400554:	42bc      	cmp	r4, r7
  400556:	d003      	beq.n	400560 <timer_add_timer_task+0x40>
		list_insert_as_head(list, new_task);
	} else {
		list_insert_after(prev, new_task);
  400558:	4630      	mov	r0, r6
  40055a:	4b04      	ldr	r3, [pc, #16]	; (40056c <timer_add_timer_task+0x4c>)
  40055c:	4798      	blx	r3
  40055e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		list_insert_as_head(list, new_task);
  400560:	4b01      	ldr	r3, [pc, #4]	; (400568 <timer_add_timer_task+0x48>)
  400562:	4798      	blx	r3
  400564:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400566:	bf00      	nop
  400568:	004009e9 	.word	0x004009e9
  40056c:	00400a15 	.word	0x00400a15

00400570 <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
  400570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  400572:	6944      	ldr	r4, [r0, #20]
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
	uint32_t                 time  = ++timer->time;
  400574:	6906      	ldr	r6, [r0, #16]
  400576:	3601      	adds	r6, #1
  400578:	6106      	str	r6, [r0, #16]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
  40057a:	7e03      	ldrb	r3, [r0, #24]
  40057c:	f013 0f01 	tst.w	r3, #1
  400580:	d105      	bne.n	40058e <timer_process_counted+0x1e>
  400582:	7e03      	ldrb	r3, [r0, #24]
  400584:	f013 0f02 	tst.w	r3, #2
  400588:	d101      	bne.n	40058e <timer_process_counted+0x1e>
  40058a:	4605      	mov	r5, r0
  40058c:	e009      	b.n	4005a2 <timer_process_counted+0x32>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
  40058e:	7e03      	ldrb	r3, [r0, #24]
  400590:	f043 0302 	orr.w	r3, r3, #2
  400594:	7603      	strb	r3, [r0, #24]
		return;
  400596:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400598:	696f      	ldr	r7, [r5, #20]
			tmp->time_label = time;
			timer_add_timer_task(&timer->tasks, tmp, time);
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);

		tmp->cb(tmp);
  40059a:	68e3      	ldr	r3, [r4, #12]
  40059c:	4620      	mov	r0, r4
  40059e:	4798      	blx	r3
		it = (struct timer_task *)list_get_head(&timer->tasks);
  4005a0:	463c      	mov	r4, r7
	while (it && ((time - it->time_label) >= it->interval)) {
  4005a2:	b19c      	cbz	r4, 4005cc <timer_process_counted+0x5c>
  4005a4:	6863      	ldr	r3, [r4, #4]
  4005a6:	1af3      	subs	r3, r6, r3
  4005a8:	68a2      	ldr	r2, [r4, #8]
  4005aa:	4293      	cmp	r3, r2
  4005ac:	d30e      	bcc.n	4005cc <timer_process_counted+0x5c>
		list_remove_head(&timer->tasks);
  4005ae:	f105 0714 	add.w	r7, r5, #20
  4005b2:	4638      	mov	r0, r7
  4005b4:	4b06      	ldr	r3, [pc, #24]	; (4005d0 <timer_process_counted+0x60>)
  4005b6:	4798      	blx	r3
		if (TIMER_TASK_REPEAT == tmp->mode) {
  4005b8:	7c23      	ldrb	r3, [r4, #16]
  4005ba:	2b01      	cmp	r3, #1
  4005bc:	d1ec      	bne.n	400598 <timer_process_counted+0x28>
			tmp->time_label = time;
  4005be:	6066      	str	r6, [r4, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
  4005c0:	4632      	mov	r2, r6
  4005c2:	4621      	mov	r1, r4
  4005c4:	4638      	mov	r0, r7
  4005c6:	4b03      	ldr	r3, [pc, #12]	; (4005d4 <timer_process_counted+0x64>)
  4005c8:	4798      	blx	r3
  4005ca:	e7e5      	b.n	400598 <timer_process_counted+0x28>
  4005cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4005ce:	bf00      	nop
  4005d0:	00400a1d 	.word	0x00400a1d
  4005d4:	00400521 	.word	0x00400521

004005d8 <timer_init>:
{
  4005d8:	b538      	push	{r3, r4, r5, lr}
	ASSERT(descr && hw);
  4005da:	4604      	mov	r4, r0
  4005dc:	460d      	mov	r5, r1
  4005de:	2800      	cmp	r0, #0
  4005e0:	bf18      	it	ne
  4005e2:	2900      	cmpne	r1, #0
  4005e4:	bf14      	ite	ne
  4005e6:	2001      	movne	r0, #1
  4005e8:	2000      	moveq	r0, #0
  4005ea:	223b      	movs	r2, #59	; 0x3b
  4005ec:	4905      	ldr	r1, [pc, #20]	; (400604 <timer_init+0x2c>)
  4005ee:	4b06      	ldr	r3, [pc, #24]	; (400608 <timer_init+0x30>)
  4005f0:	4798      	blx	r3
	_timer_init(&descr->device, hw);
  4005f2:	4629      	mov	r1, r5
  4005f4:	4620      	mov	r0, r4
  4005f6:	4b05      	ldr	r3, [pc, #20]	; (40060c <timer_init+0x34>)
  4005f8:	4798      	blx	r3
	descr->time                           = 0;
  4005fa:	2000      	movs	r0, #0
  4005fc:	6120      	str	r0, [r4, #16]
	descr->device.timer_cb.period_expired = timer_process_counted;
  4005fe:	4b04      	ldr	r3, [pc, #16]	; (400610 <timer_init+0x38>)
  400600:	6023      	str	r3, [r4, #0]
}
  400602:	bd38      	pop	{r3, r4, r5, pc}
  400604:	004011fc 	.word	0x004011fc
  400608:	004009cd 	.word	0x004009cd
  40060c:	00400ca1 	.word	0x00400ca1
  400610:	00400571 	.word	0x00400571

00400614 <timer_start>:
{
  400614:	b510      	push	{r4, lr}
	ASSERT(descr);
  400616:	4604      	mov	r4, r0
  400618:	2253      	movs	r2, #83	; 0x53
  40061a:	4909      	ldr	r1, [pc, #36]	; (400640 <timer_start+0x2c>)
  40061c:	3000      	adds	r0, #0
  40061e:	bf18      	it	ne
  400620:	2001      	movne	r0, #1
  400622:	4b08      	ldr	r3, [pc, #32]	; (400644 <timer_start+0x30>)
  400624:	4798      	blx	r3
	if (_timer_is_started(&descr->device)) {
  400626:	4620      	mov	r0, r4
  400628:	4b07      	ldr	r3, [pc, #28]	; (400648 <timer_start+0x34>)
  40062a:	4798      	blx	r3
  40062c:	b920      	cbnz	r0, 400638 <timer_start+0x24>
	_timer_start(&descr->device);
  40062e:	4620      	mov	r0, r4
  400630:	4b06      	ldr	r3, [pc, #24]	; (40064c <timer_start+0x38>)
  400632:	4798      	blx	r3
	return ERR_NONE;
  400634:	2000      	movs	r0, #0
  400636:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
  400638:	f06f 0010 	mvn.w	r0, #16
}
  40063c:	bd10      	pop	{r4, pc}
  40063e:	bf00      	nop
  400640:	004011fc 	.word	0x004011fc
  400644:	004009cd 	.word	0x004009cd
  400648:	00400d65 	.word	0x00400d65
  40064c:	00400d5d 	.word	0x00400d5d

00400650 <timer_add_task>:
{
  400650:	b570      	push	{r4, r5, r6, lr}
  400652:	b082      	sub	sp, #8
	ASSERT(descr && task);
  400654:	4604      	mov	r4, r0
  400656:	460d      	mov	r5, r1
  400658:	2800      	cmp	r0, #0
  40065a:	bf18      	it	ne
  40065c:	2900      	cmpne	r1, #0
  40065e:	bf14      	ite	ne
  400660:	2001      	movne	r0, #1
  400662:	2000      	moveq	r0, #0
  400664:	227a      	movs	r2, #122	; 0x7a
  400666:	491d      	ldr	r1, [pc, #116]	; (4006dc <timer_add_task+0x8c>)
  400668:	4b1d      	ldr	r3, [pc, #116]	; (4006e0 <timer_add_task+0x90>)
  40066a:	4798      	blx	r3
	descr->flags |= TIMER_FLAG_QUEUE_IS_TAKEN;
  40066c:	7e23      	ldrb	r3, [r4, #24]
  40066e:	f043 0301 	orr.w	r3, r3, #1
  400672:	7623      	strb	r3, [r4, #24]
	if (is_list_element(&descr->tasks, task)) {
  400674:	f104 0614 	add.w	r6, r4, #20
  400678:	4629      	mov	r1, r5
  40067a:	4630      	mov	r0, r6
  40067c:	4b19      	ldr	r3, [pc, #100]	; (4006e4 <timer_add_task+0x94>)
  40067e:	4798      	blx	r3
  400680:	b988      	cbnz	r0, 4006a6 <timer_add_task+0x56>
	task->time_label = descr->time;
  400682:	6923      	ldr	r3, [r4, #16]
  400684:	606b      	str	r3, [r5, #4]
	timer_add_timer_task(&descr->tasks, task, descr->time);
  400686:	6922      	ldr	r2, [r4, #16]
  400688:	4629      	mov	r1, r5
  40068a:	4630      	mov	r0, r6
  40068c:	4b16      	ldr	r3, [pc, #88]	; (4006e8 <timer_add_task+0x98>)
  40068e:	4798      	blx	r3
	descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
  400690:	7e23      	ldrb	r3, [r4, #24]
  400692:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
  400696:	7623      	strb	r3, [r4, #24]
	if (descr->flags & TIMER_FLAG_INTERRUPT_TRIGERRED) {
  400698:	7e23      	ldrb	r3, [r4, #24]
  40069a:	f013 0f02 	tst.w	r3, #2
  40069e:	d10e      	bne.n	4006be <timer_add_task+0x6e>
	return ERR_NONE;
  4006a0:	2000      	movs	r0, #0
}
  4006a2:	b002      	add	sp, #8
  4006a4:	bd70      	pop	{r4, r5, r6, pc}
		descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
  4006a6:	7e23      	ldrb	r3, [r4, #24]
  4006a8:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
  4006ac:	7623      	strb	r3, [r4, #24]
		ASSERT(false);
  4006ae:	227f      	movs	r2, #127	; 0x7f
  4006b0:	490a      	ldr	r1, [pc, #40]	; (4006dc <timer_add_task+0x8c>)
  4006b2:	2000      	movs	r0, #0
  4006b4:	4b0a      	ldr	r3, [pc, #40]	; (4006e0 <timer_add_task+0x90>)
  4006b6:	4798      	blx	r3
		return ERR_ALREADY_INITIALIZED;
  4006b8:	f06f 0011 	mvn.w	r0, #17
  4006bc:	e7f1      	b.n	4006a2 <timer_add_task+0x52>
		CRITICAL_SECTION_ENTER()
  4006be:	a801      	add	r0, sp, #4
  4006c0:	4b0a      	ldr	r3, [pc, #40]	; (4006ec <timer_add_task+0x9c>)
  4006c2:	4798      	blx	r3
		descr->flags &= ~TIMER_FLAG_INTERRUPT_TRIGERRED;
  4006c4:	7e23      	ldrb	r3, [r4, #24]
  4006c6:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
  4006ca:	7623      	strb	r3, [r4, #24]
		_timer_set_irq(&descr->device);
  4006cc:	4620      	mov	r0, r4
  4006ce:	4b08      	ldr	r3, [pc, #32]	; (4006f0 <timer_add_task+0xa0>)
  4006d0:	4798      	blx	r3
		CRITICAL_SECTION_LEAVE()
  4006d2:	a801      	add	r0, sp, #4
  4006d4:	4b07      	ldr	r3, [pc, #28]	; (4006f4 <timer_add_task+0xa4>)
  4006d6:	4798      	blx	r3
	return ERR_NONE;
  4006d8:	2000      	movs	r0, #0
  4006da:	e7e2      	b.n	4006a2 <timer_add_task+0x52>
  4006dc:	004011fc 	.word	0x004011fc
  4006e0:	004009cd 	.word	0x004009cd
  4006e4:	004009d3 	.word	0x004009d3
  4006e8:	00400521 	.word	0x00400521
  4006ec:	004004d5 	.word	0x004004d5
  4006f0:	00400d71 	.word	0x00400d71
  4006f4:	004004e3 	.word	0x004004e3

004006f8 <usart_transmission_complete>:
 * \brief Process completion of data sending
 *
 * \param[in] device The pointer to device structure
 */
static void usart_transmission_complete(struct _usart_async_device *device)
{
  4006f8:	b508      	push	{r3, lr}
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);

	descr->stat = 0;
  4006fa:	2300      	movs	r3, #0
  4006fc:	6283      	str	r3, [r0, #40]	; 0x28
	if (descr->usart_cb.tx_done) {
  4006fe:	69c3      	ldr	r3, [r0, #28]
  400700:	b11b      	cbz	r3, 40070a <usart_transmission_complete+0x12>
  400702:	f1a0 0208 	sub.w	r2, r0, #8
		descr->usart_cb.tx_done(descr);
  400706:	4610      	mov	r0, r2
  400708:	4798      	blx	r3
  40070a:	bd08      	pop	{r3, pc}

0040070c <usart_error>:
 * \brief Process error interrupt
 *
 * \param[in] device The pointer to device structure
 */
static void usart_error(struct _usart_async_device *device)
{
  40070c:	b508      	push	{r3, lr}
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);

	descr->stat = 0;
  40070e:	2300      	movs	r3, #0
  400710:	6283      	str	r3, [r0, #40]	; 0x28
	if (descr->usart_cb.error) {
  400712:	6a43      	ldr	r3, [r0, #36]	; 0x24
  400714:	b11b      	cbz	r3, 40071e <usart_error+0x12>
  400716:	f1a0 0208 	sub.w	r2, r0, #8
		descr->usart_cb.error(descr);
  40071a:	4610      	mov	r0, r2
  40071c:	4798      	blx	r3
  40071e:	bd08      	pop	{r3, pc}

00400720 <usart_fill_rx_buffer>:
{
  400720:	b538      	push	{r3, r4, r5, lr}
  400722:	4604      	mov	r4, r0
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
  400724:	f1a0 0508 	sub.w	r5, r0, #8
	ringbuffer_put(&descr->rx, data);
  400728:	302c      	adds	r0, #44	; 0x2c
  40072a:	4b03      	ldr	r3, [pc, #12]	; (400738 <usart_fill_rx_buffer+0x18>)
  40072c:	4798      	blx	r3
	if (descr->usart_cb.rx_done) {
  40072e:	6a23      	ldr	r3, [r4, #32]
  400730:	b10b      	cbz	r3, 400736 <usart_fill_rx_buffer+0x16>
		descr->usart_cb.rx_done(descr);
  400732:	4628      	mov	r0, r5
  400734:	4798      	blx	r3
  400736:	bd38      	pop	{r3, r4, r5, pc}
  400738:	00400ab5 	.word	0x00400ab5

0040073c <usart_async_write>:
{
  40073c:	b570      	push	{r4, r5, r6, lr}
  40073e:	4615      	mov	r5, r2
	ASSERT(descr && buf && length);
  400740:	4604      	mov	r4, r0
  400742:	460e      	mov	r6, r1
  400744:	2800      	cmp	r0, #0
  400746:	bf18      	it	ne
  400748:	2900      	cmpne	r1, #0
  40074a:	d002      	beq.n	400752 <usart_async_write+0x16>
  40074c:	b9da      	cbnz	r2, 400786 <usart_async_write+0x4a>
  40074e:	2000      	movs	r0, #0
  400750:	e000      	b.n	400754 <usart_async_write+0x18>
  400752:	2000      	movs	r0, #0
  400754:	f240 123b 	movw	r2, #315	; 0x13b
  400758:	490d      	ldr	r1, [pc, #52]	; (400790 <usart_async_write+0x54>)
  40075a:	4b0e      	ldr	r3, [pc, #56]	; (400794 <usart_async_write+0x58>)
  40075c:	4798      	blx	r3
	if (descr->tx_por != descr->tx_buffer_length) {
  40075e:	f8b4 2044 	ldrh.w	r2, [r4, #68]	; 0x44
  400762:	f8b4 304c 	ldrh.w	r3, [r4, #76]	; 0x4c
  400766:	429a      	cmp	r2, r3
  400768:	d10f      	bne.n	40078a <usart_async_write+0x4e>
	descr->tx_buffer        = (uint8_t *)buf;
  40076a:	64a6      	str	r6, [r4, #72]	; 0x48
	descr->tx_buffer_length = length;
  40076c:	f8a4 504c 	strh.w	r5, [r4, #76]	; 0x4c
	descr->tx_por           = 0;
  400770:	2300      	movs	r3, #0
  400772:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
	descr->stat             = USART_ASYNC_STATUS_BUSY;
  400776:	2301      	movs	r3, #1
  400778:	6323      	str	r3, [r4, #48]	; 0x30
	_usart_async_enable_byte_sent_irq(&descr->device);
  40077a:	f104 0008 	add.w	r0, r4, #8
  40077e:	4b06      	ldr	r3, [pc, #24]	; (400798 <usart_async_write+0x5c>)
  400780:	4798      	blx	r3
	return (int32_t)length;
  400782:	4628      	mov	r0, r5
  400784:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && buf && length);
  400786:	2001      	movs	r0, #1
  400788:	e7e4      	b.n	400754 <usart_async_write+0x18>
		return ERR_NO_RESOURCE;
  40078a:	f06f 001b 	mvn.w	r0, #27
}
  40078e:	bd70      	pop	{r4, r5, r6, pc}
  400790:	00401214 	.word	0x00401214
  400794:	004009cd 	.word	0x004009cd
  400798:	00401075 	.word	0x00401075

0040079c <usart_process_byte_sent>:
{
  40079c:	b510      	push	{r4, lr}
  40079e:	4604      	mov	r4, r0
	if (descr->tx_por != descr->tx_buffer_length) {
  4007a0:	8f83      	ldrh	r3, [r0, #60]	; 0x3c
  4007a2:	f8b0 2044 	ldrh.w	r2, [r0, #68]	; 0x44
  4007a6:	4293      	cmp	r3, r2
  4007a8:	d009      	beq.n	4007be <usart_process_byte_sent+0x22>
		_usart_async_write_byte(&descr->device, descr->tx_buffer[descr->tx_por++]);
  4007aa:	6c02      	ldr	r2, [r0, #64]	; 0x40
  4007ac:	1c59      	adds	r1, r3, #1
  4007ae:	8781      	strh	r1, [r0, #60]	; 0x3c
  4007b0:	5cd1      	ldrb	r1, [r2, r3]
  4007b2:	4b04      	ldr	r3, [pc, #16]	; (4007c4 <usart_process_byte_sent+0x28>)
  4007b4:	4798      	blx	r3
		_usart_async_enable_byte_sent_irq(&descr->device);
  4007b6:	4620      	mov	r0, r4
  4007b8:	4b03      	ldr	r3, [pc, #12]	; (4007c8 <usart_process_byte_sent+0x2c>)
  4007ba:	4798      	blx	r3
  4007bc:	bd10      	pop	{r4, pc}
		_usart_async_enable_tx_done_irq(&descr->device);
  4007be:	4b03      	ldr	r3, [pc, #12]	; (4007cc <usart_process_byte_sent+0x30>)
  4007c0:	4798      	blx	r3
  4007c2:	bd10      	pop	{r4, pc}
  4007c4:	00401051 	.word	0x00401051
  4007c8:	00401075 	.word	0x00401075
  4007cc:	00401099 	.word	0x00401099

004007d0 <usart_async_read>:
{
  4007d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4007d4:	b082      	sub	sp, #8
  4007d6:	4617      	mov	r7, r2
	ASSERT(descr && buf && length);
  4007d8:	4605      	mov	r5, r0
  4007da:	4688      	mov	r8, r1
  4007dc:	2800      	cmp	r0, #0
  4007de:	bf18      	it	ne
  4007e0:	2900      	cmpne	r1, #0
  4007e2:	d002      	beq.n	4007ea <usart_async_read+0x1a>
  4007e4:	b9a2      	cbnz	r2, 400810 <usart_async_read+0x40>
  4007e6:	2000      	movs	r0, #0
  4007e8:	e000      	b.n	4007ec <usart_async_read+0x1c>
  4007ea:	2000      	movs	r0, #0
  4007ec:	f44f 72ac 	mov.w	r2, #344	; 0x158
  4007f0:	4910      	ldr	r1, [pc, #64]	; (400834 <usart_async_read+0x64>)
  4007f2:	4b11      	ldr	r3, [pc, #68]	; (400838 <usart_async_read+0x68>)
  4007f4:	4798      	blx	r3
	CRITICAL_SECTION_ENTER()
  4007f6:	a801      	add	r0, sp, #4
  4007f8:	4b10      	ldr	r3, [pc, #64]	; (40083c <usart_async_read+0x6c>)
  4007fa:	4798      	blx	r3
	num = ringbuffer_num(&descr->rx);
  4007fc:	3534      	adds	r5, #52	; 0x34
  4007fe:	4628      	mov	r0, r5
  400800:	4b0f      	ldr	r3, [pc, #60]	; (400840 <usart_async_read+0x70>)
  400802:	4798      	blx	r3
  400804:	4606      	mov	r6, r0
	CRITICAL_SECTION_LEAVE()
  400806:	a801      	add	r0, sp, #4
  400808:	4b0e      	ldr	r3, [pc, #56]	; (400844 <usart_async_read+0x74>)
  40080a:	4798      	blx	r3
	uint16_t                       was_read = 0;
  40080c:	2400      	movs	r4, #0
	while ((was_read < num) && (was_read < length)) {
  40080e:	e007      	b.n	400820 <usart_async_read+0x50>
	ASSERT(descr && buf && length);
  400810:	2001      	movs	r0, #1
  400812:	e7eb      	b.n	4007ec <usart_async_read+0x1c>
		ringbuffer_get(&descr->rx, &buf[was_read++]);
  400814:	3401      	adds	r4, #1
  400816:	b2a4      	uxth	r4, r4
  400818:	4441      	add	r1, r8
  40081a:	4628      	mov	r0, r5
  40081c:	4b0a      	ldr	r3, [pc, #40]	; (400848 <usart_async_read+0x78>)
  40081e:	4798      	blx	r3
	while ((was_read < num) && (was_read < length)) {
  400820:	4621      	mov	r1, r4
  400822:	42a6      	cmp	r6, r4
  400824:	d901      	bls.n	40082a <usart_async_read+0x5a>
  400826:	42bc      	cmp	r4, r7
  400828:	d3f4      	bcc.n	400814 <usart_async_read+0x44>
}
  40082a:	4620      	mov	r0, r4
  40082c:	b002      	add	sp, #8
  40082e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400832:	bf00      	nop
  400834:	00401214 	.word	0x00401214
  400838:	004009cd 	.word	0x004009cd
  40083c:	004004d5 	.word	0x004004d5
  400840:	00400af5 	.word	0x00400af5
  400844:	004004e3 	.word	0x004004e3
  400848:	00400a71 	.word	0x00400a71

0040084c <usart_async_init>:
{
  40084c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40084e:	4615      	mov	r5, r2
  400850:	461e      	mov	r6, r3
	ASSERT(descr && hw && rx_buffer && rx_buffer_length);
  400852:	4604      	mov	r4, r0
  400854:	460f      	mov	r7, r1
  400856:	2800      	cmp	r0, #0
  400858:	bf18      	it	ne
  40085a:	2900      	cmpne	r1, #0
  40085c:	d008      	beq.n	400870 <usart_async_init+0x24>
  40085e:	1c13      	adds	r3, r2, #0
  400860:	bf18      	it	ne
  400862:	2301      	movne	r3, #1
  400864:	b116      	cbz	r6, 40086c <usart_async_init+0x20>
  400866:	b10b      	cbz	r3, 40086c <usart_async_init+0x20>
  400868:	2001      	movs	r0, #1
  40086a:	e002      	b.n	400872 <usart_async_init+0x26>
  40086c:	2000      	movs	r0, #0
  40086e:	e000      	b.n	400872 <usart_async_init+0x26>
  400870:	2000      	movs	r0, #0
  400872:	223a      	movs	r2, #58	; 0x3a
  400874:	4910      	ldr	r1, [pc, #64]	; (4008b8 <usart_async_init+0x6c>)
  400876:	4b11      	ldr	r3, [pc, #68]	; (4008bc <usart_async_init+0x70>)
  400878:	4798      	blx	r3
	if (ERR_NONE != ringbuffer_init(&descr->rx, rx_buffer, rx_buffer_length)) {
  40087a:	4632      	mov	r2, r6
  40087c:	4629      	mov	r1, r5
  40087e:	f104 0034 	add.w	r0, r4, #52	; 0x34
  400882:	4b0f      	ldr	r3, [pc, #60]	; (4008c0 <usart_async_init+0x74>)
  400884:	4798      	blx	r3
  400886:	b9a0      	cbnz	r0, 4008b2 <usart_async_init+0x66>
	init_status = _usart_async_init(&descr->device, hw);
  400888:	4639      	mov	r1, r7
  40088a:	f104 0008 	add.w	r0, r4, #8
  40088e:	4b0d      	ldr	r3, [pc, #52]	; (4008c4 <usart_async_init+0x78>)
  400890:	4798      	blx	r3
	if (init_status) {
  400892:	4603      	mov	r3, r0
  400894:	b958      	cbnz	r0, 4008ae <usart_async_init+0x62>
	descr->io.read  = usart_async_read;
  400896:	4a0c      	ldr	r2, [pc, #48]	; (4008c8 <usart_async_init+0x7c>)
  400898:	6062      	str	r2, [r4, #4]
	descr->io.write = usart_async_write;
  40089a:	4a0c      	ldr	r2, [pc, #48]	; (4008cc <usart_async_init+0x80>)
  40089c:	6022      	str	r2, [r4, #0]
	descr->device.usart_cb.tx_byte_sent = usart_process_byte_sent;
  40089e:	4a0c      	ldr	r2, [pc, #48]	; (4008d0 <usart_async_init+0x84>)
  4008a0:	60a2      	str	r2, [r4, #8]
	descr->device.usart_cb.rx_done_cb   = usart_fill_rx_buffer;
  4008a2:	4a0c      	ldr	r2, [pc, #48]	; (4008d4 <usart_async_init+0x88>)
  4008a4:	60e2      	str	r2, [r4, #12]
	descr->device.usart_cb.tx_done_cb   = usart_transmission_complete;
  4008a6:	4a0c      	ldr	r2, [pc, #48]	; (4008d8 <usart_async_init+0x8c>)
  4008a8:	6122      	str	r2, [r4, #16]
	descr->device.usart_cb.error_cb     = usart_error;
  4008aa:	4a0c      	ldr	r2, [pc, #48]	; (4008dc <usart_async_init+0x90>)
  4008ac:	6162      	str	r2, [r4, #20]
}
  4008ae:	4618      	mov	r0, r3
  4008b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return ERR_INVALID_ARG;
  4008b2:	f06f 030c 	mvn.w	r3, #12
  4008b6:	e7fa      	b.n	4008ae <usart_async_init+0x62>
  4008b8:	00401214 	.word	0x00401214
  4008bc:	004009cd 	.word	0x004009cd
  4008c0:	00400a2d 	.word	0x00400a2d
  4008c4:	00400f71 	.word	0x00400f71
  4008c8:	004007d1 	.word	0x004007d1
  4008cc:	0040073d 	.word	0x0040073d
  4008d0:	0040079d 	.word	0x0040079d
  4008d4:	00400721 	.word	0x00400721
  4008d8:	004006f9 	.word	0x004006f9
  4008dc:	0040070d 	.word	0x0040070d

004008e0 <usart_async_enable>:
{
  4008e0:	b510      	push	{r4, lr}
	ASSERT(descr);
  4008e2:	4604      	mov	r4, r0
  4008e4:	2261      	movs	r2, #97	; 0x61
  4008e6:	4906      	ldr	r1, [pc, #24]	; (400900 <usart_async_enable+0x20>)
  4008e8:	3000      	adds	r0, #0
  4008ea:	bf18      	it	ne
  4008ec:	2001      	movne	r0, #1
  4008ee:	4b05      	ldr	r3, [pc, #20]	; (400904 <usart_async_enable+0x24>)
  4008f0:	4798      	blx	r3
	_usart_async_enable(&descr->device);
  4008f2:	f104 0008 	add.w	r0, r4, #8
  4008f6:	4b04      	ldr	r3, [pc, #16]	; (400908 <usart_async_enable+0x28>)
  4008f8:	4798      	blx	r3
}
  4008fa:	2000      	movs	r0, #0
  4008fc:	bd10      	pop	{r4, pc}
  4008fe:	bf00      	nop
  400900:	00401214 	.word	0x00401214
  400904:	004009cd 	.word	0x004009cd
  400908:	0040101d 	.word	0x0040101d

0040090c <usart_async_register_callback>:
{
  40090c:	b570      	push	{r4, r5, r6, lr}
  40090e:	460c      	mov	r4, r1
  400910:	4616      	mov	r6, r2
	ASSERT(descr);
  400912:	4605      	mov	r5, r0
  400914:	2283      	movs	r2, #131	; 0x83
  400916:	4917      	ldr	r1, [pc, #92]	; (400974 <usart_async_register_callback+0x68>)
  400918:	3000      	adds	r0, #0
  40091a:	bf18      	it	ne
  40091c:	2001      	movne	r0, #1
  40091e:	4b16      	ldr	r3, [pc, #88]	; (400978 <usart_async_register_callback+0x6c>)
  400920:	4798      	blx	r3
	switch (type) {
  400922:	2c01      	cmp	r4, #1
  400924:	d010      	beq.n	400948 <usart_async_register_callback+0x3c>
  400926:	b124      	cbz	r4, 400932 <usart_async_register_callback+0x26>
  400928:	2c02      	cmp	r4, #2
  40092a:	d018      	beq.n	40095e <usart_async_register_callback+0x52>
		return ERR_INVALID_ARG;
  40092c:	f06f 000c 	mvn.w	r0, #12
}
  400930:	bd70      	pop	{r4, r5, r6, pc}
		descr->usart_cb.rx_done = cb;
  400932:	62ae      	str	r6, [r5, #40]	; 0x28
		_usart_async_set_irq_state(&descr->device, USART_ASYNC_RX_DONE, NULL != cb);
  400934:	1c32      	adds	r2, r6, #0
  400936:	bf18      	it	ne
  400938:	2201      	movne	r2, #1
  40093a:	2101      	movs	r1, #1
  40093c:	f105 0008 	add.w	r0, r5, #8
  400940:	4b0e      	ldr	r3, [pc, #56]	; (40097c <usart_async_register_callback+0x70>)
  400942:	4798      	blx	r3
	return ERR_NONE;
  400944:	2000      	movs	r0, #0
		break;
  400946:	bd70      	pop	{r4, r5, r6, pc}
		descr->usart_cb.tx_done = cb;
  400948:	626e      	str	r6, [r5, #36]	; 0x24
		_usart_async_set_irq_state(&descr->device, USART_ASYNC_TX_DONE, NULL != cb);
  40094a:	1c32      	adds	r2, r6, #0
  40094c:	bf18      	it	ne
  40094e:	2201      	movne	r2, #1
  400950:	2102      	movs	r1, #2
  400952:	f105 0008 	add.w	r0, r5, #8
  400956:	4b09      	ldr	r3, [pc, #36]	; (40097c <usart_async_register_callback+0x70>)
  400958:	4798      	blx	r3
	return ERR_NONE;
  40095a:	2000      	movs	r0, #0
		break;
  40095c:	bd70      	pop	{r4, r5, r6, pc}
		descr->usart_cb.error = cb;
  40095e:	62ee      	str	r6, [r5, #44]	; 0x2c
		_usart_async_set_irq_state(&descr->device, USART_ASYNC_ERROR, NULL != cb);
  400960:	1c32      	adds	r2, r6, #0
  400962:	bf18      	it	ne
  400964:	2201      	movne	r2, #1
  400966:	2103      	movs	r1, #3
  400968:	f105 0008 	add.w	r0, r5, #8
  40096c:	4b03      	ldr	r3, [pc, #12]	; (40097c <usart_async_register_callback+0x70>)
  40096e:	4798      	blx	r3
	return ERR_NONE;
  400970:	2000      	movs	r0, #0
		break;
  400972:	bd70      	pop	{r4, r5, r6, pc}
  400974:	00401214 	.word	0x00401214
  400978:	004009cd 	.word	0x004009cd
  40097c:	004010c1 	.word	0x004010c1

00400980 <usart_async_get_status>:
{
  400980:	b538      	push	{r3, r4, r5, lr}
  400982:	460d      	mov	r5, r1
	ASSERT(descr);
  400984:	4604      	mov	r4, r0
  400986:	f240 120b 	movw	r2, #267	; 0x10b
  40098a:	490d      	ldr	r1, [pc, #52]	; (4009c0 <usart_async_get_status+0x40>)
  40098c:	3000      	adds	r0, #0
  40098e:	bf18      	it	ne
  400990:	2001      	movne	r0, #1
  400992:	4b0c      	ldr	r3, [pc, #48]	; (4009c4 <usart_async_get_status+0x44>)
  400994:	4798      	blx	r3
	if (status) {
  400996:	b14d      	cbz	r5, 4009ac <usart_async_get_status+0x2c>
		status->flags = *tmp_stat;
  400998:	6b23      	ldr	r3, [r4, #48]	; 0x30
  40099a:	602b      	str	r3, [r5, #0]
		status->txcnt = *tmp_txcnt;
  40099c:	f8b4 3044 	ldrh.w	r3, [r4, #68]	; 0x44
  4009a0:	80ab      	strh	r3, [r5, #4]
		status->rxcnt = ringbuffer_num(&descr->rx);
  4009a2:	f104 0034 	add.w	r0, r4, #52	; 0x34
  4009a6:	4b08      	ldr	r3, [pc, #32]	; (4009c8 <usart_async_get_status+0x48>)
  4009a8:	4798      	blx	r3
  4009aa:	80e8      	strh	r0, [r5, #6]
	if (*tmp_stat & USART_ASYNC_STATUS_BUSY) {
  4009ac:	6b23      	ldr	r3, [r4, #48]	; 0x30
  4009ae:	f013 0f01 	tst.w	r3, #1
  4009b2:	d101      	bne.n	4009b8 <usart_async_get_status+0x38>
	return ERR_NONE;
  4009b4:	2000      	movs	r0, #0
}
  4009b6:	bd38      	pop	{r3, r4, r5, pc}
		return ERR_BUSY;
  4009b8:	f06f 0003 	mvn.w	r0, #3
  4009bc:	bd38      	pop	{r3, r4, r5, pc}
  4009be:	bf00      	nop
  4009c0:	00401214 	.word	0x00401214
  4009c4:	004009cd 	.word	0x004009cd
  4009c8:	00400af5 	.word	0x00400af5

004009cc <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
  4009cc:	b900      	cbnz	r0, 4009d0 <assert+0x4>
		__asm("BKPT #0");
  4009ce:	be00      	bkpt	0x0000
  4009d0:	4770      	bx	lr

004009d2 <is_list_element>:
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
  4009d2:	6803      	ldr	r3, [r0, #0]
  4009d4:	b11b      	cbz	r3, 4009de <is_list_element+0xc>
		if (it == element) {
  4009d6:	428b      	cmp	r3, r1
  4009d8:	d003      	beq.n	4009e2 <is_list_element+0x10>
	for (it = list->head; it; it = it->next) {
  4009da:	681b      	ldr	r3, [r3, #0]
  4009dc:	e7fa      	b.n	4009d4 <is_list_element+0x2>
			return true;
		}
	}

	return false;
  4009de:	2000      	movs	r0, #0
  4009e0:	4770      	bx	lr
			return true;
  4009e2:	2001      	movs	r0, #1
}
  4009e4:	4770      	bx	lr
	...

004009e8 <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
  4009e8:	b538      	push	{r3, r4, r5, lr}
  4009ea:	4604      	mov	r4, r0
  4009ec:	460d      	mov	r5, r1
	ASSERT(!is_list_element(list, element));
  4009ee:	4b06      	ldr	r3, [pc, #24]	; (400a08 <list_insert_as_head+0x20>)
  4009f0:	4798      	blx	r3
  4009f2:	f080 0001 	eor.w	r0, r0, #1
  4009f6:	2239      	movs	r2, #57	; 0x39
  4009f8:	4904      	ldr	r1, [pc, #16]	; (400a0c <list_insert_as_head+0x24>)
  4009fa:	b2c0      	uxtb	r0, r0
  4009fc:	4b04      	ldr	r3, [pc, #16]	; (400a10 <list_insert_as_head+0x28>)
  4009fe:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
  400a00:	6823      	ldr	r3, [r4, #0]
  400a02:	602b      	str	r3, [r5, #0]
	list->head                             = (struct list_element *)element;
  400a04:	6025      	str	r5, [r4, #0]
  400a06:	bd38      	pop	{r3, r4, r5, pc}
  400a08:	004009d3 	.word	0x004009d3
  400a0c:	00401234 	.word	0x00401234
  400a10:	004009cd 	.word	0x004009cd

00400a14 <list_insert_after>:
/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
  400a14:	6803      	ldr	r3, [r0, #0]
  400a16:	600b      	str	r3, [r1, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
  400a18:	6001      	str	r1, [r0, #0]
  400a1a:	4770      	bx	lr

00400a1c <list_remove_head>:
/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
	if (list->head) {
  400a1c:	6803      	ldr	r3, [r0, #0]
  400a1e:	b11b      	cbz	r3, 400a28 <list_remove_head+0xc>
		struct list_element *tmp = list->head;

		list->head = list->head->next;
  400a20:	681a      	ldr	r2, [r3, #0]
  400a22:	6002      	str	r2, [r0, #0]
		return (void *)tmp;
  400a24:	4618      	mov	r0, r3
  400a26:	4770      	bx	lr
	}

	return NULL;
  400a28:	2000      	movs	r0, #0
}
  400a2a:	4770      	bx	lr

00400a2c <ringbuffer_init>:

/**
 * \brief Ringbuffer init
 */
int32_t ringbuffer_init(struct ringbuffer *const rb, void *buf, uint32_t size)
{
  400a2c:	b570      	push	{r4, r5, r6, lr}
  400a2e:	4615      	mov	r5, r2
	ASSERT(rb && buf && size);
  400a30:	4604      	mov	r4, r0
  400a32:	460e      	mov	r6, r1
  400a34:	2800      	cmp	r0, #0
  400a36:	bf18      	it	ne
  400a38:	2900      	cmpne	r1, #0
  400a3a:	d002      	beq.n	400a42 <ringbuffer_init+0x16>
  400a3c:	b97a      	cbnz	r2, 400a5e <ringbuffer_init+0x32>
  400a3e:	2000      	movs	r0, #0
  400a40:	e000      	b.n	400a44 <ringbuffer_init+0x18>
  400a42:	2000      	movs	r0, #0
  400a44:	2228      	movs	r2, #40	; 0x28
  400a46:	4908      	ldr	r1, [pc, #32]	; (400a68 <ringbuffer_init+0x3c>)
  400a48:	4b08      	ldr	r3, [pc, #32]	; (400a6c <ringbuffer_init+0x40>)
  400a4a:	4798      	blx	r3

	/*
	 * buf size must be aligned to power of 2
	 */
	if ((size & (size - 1)) != 0) {
  400a4c:	1e6b      	subs	r3, r5, #1
  400a4e:	421d      	tst	r5, r3
  400a50:	d107      	bne.n	400a62 <ringbuffer_init+0x36>
		return ERR_INVALID_ARG;
	}

	/* size - 1 is faster in calculation */
	rb->size        = size - 1;
  400a52:	6063      	str	r3, [r4, #4]
	rb->read_index  = 0;
  400a54:	2000      	movs	r0, #0
  400a56:	60a0      	str	r0, [r4, #8]
	rb->write_index = rb->read_index;
  400a58:	60e0      	str	r0, [r4, #12]
	rb->buf         = (uint8_t *)buf;
  400a5a:	6026      	str	r6, [r4, #0]

	return ERR_NONE;
  400a5c:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(rb && buf && size);
  400a5e:	2001      	movs	r0, #1
  400a60:	e7f0      	b.n	400a44 <ringbuffer_init+0x18>
		return ERR_INVALID_ARG;
  400a62:	f06f 000c 	mvn.w	r0, #12
}
  400a66:	bd70      	pop	{r4, r5, r6, pc}
  400a68:	00401254 	.word	0x00401254
  400a6c:	004009cd 	.word	0x004009cd

00400a70 <ringbuffer_get>:
/**
 * \brief Get one byte from ringbuffer
 *
 */
int32_t ringbuffer_get(struct ringbuffer *const rb, uint8_t *data)
{
  400a70:	b538      	push	{r3, r4, r5, lr}
	ASSERT(rb && data);
  400a72:	4604      	mov	r4, r0
  400a74:	460d      	mov	r5, r1
  400a76:	2800      	cmp	r0, #0
  400a78:	bf18      	it	ne
  400a7a:	2900      	cmpne	r1, #0
  400a7c:	bf14      	ite	ne
  400a7e:	2001      	movne	r0, #1
  400a80:	2000      	moveq	r0, #0
  400a82:	2240      	movs	r2, #64	; 0x40
  400a84:	4909      	ldr	r1, [pc, #36]	; (400aac <ringbuffer_get+0x3c>)
  400a86:	4b0a      	ldr	r3, [pc, #40]	; (400ab0 <ringbuffer_get+0x40>)
  400a88:	4798      	blx	r3

	if (rb->write_index != rb->read_index) {
  400a8a:	68e2      	ldr	r2, [r4, #12]
  400a8c:	68a3      	ldr	r3, [r4, #8]
  400a8e:	429a      	cmp	r2, r3
  400a90:	d009      	beq.n	400aa6 <ringbuffer_get+0x36>
		*data = rb->buf[rb->read_index & rb->size];
  400a92:	6822      	ldr	r2, [r4, #0]
  400a94:	6861      	ldr	r1, [r4, #4]
  400a96:	400b      	ands	r3, r1
  400a98:	5cd3      	ldrb	r3, [r2, r3]
  400a9a:	702b      	strb	r3, [r5, #0]
		rb->read_index++;
  400a9c:	68a3      	ldr	r3, [r4, #8]
  400a9e:	3301      	adds	r3, #1
  400aa0:	60a3      	str	r3, [r4, #8]
		return ERR_NONE;
  400aa2:	2000      	movs	r0, #0
  400aa4:	bd38      	pop	{r3, r4, r5, pc}
	}

	return ERR_NOT_FOUND;
  400aa6:	f06f 0009 	mvn.w	r0, #9
}
  400aaa:	bd38      	pop	{r3, r4, r5, pc}
  400aac:	00401254 	.word	0x00401254
  400ab0:	004009cd 	.word	0x004009cd

00400ab4 <ringbuffer_put>:
/**
 * \brief Put one byte to ringbuffer
 *
 */
int32_t ringbuffer_put(struct ringbuffer *const rb, uint8_t data)
{
  400ab4:	b538      	push	{r3, r4, r5, lr}
  400ab6:	460d      	mov	r5, r1
	ASSERT(rb);
  400ab8:	4604      	mov	r4, r0
  400aba:	2251      	movs	r2, #81	; 0x51
  400abc:	490b      	ldr	r1, [pc, #44]	; (400aec <ringbuffer_put+0x38>)
  400abe:	3000      	adds	r0, #0
  400ac0:	bf18      	it	ne
  400ac2:	2001      	movne	r0, #1
  400ac4:	4b0a      	ldr	r3, [pc, #40]	; (400af0 <ringbuffer_put+0x3c>)
  400ac6:	4798      	blx	r3

	rb->buf[rb->write_index & rb->size] = data;
  400ac8:	6822      	ldr	r2, [r4, #0]
  400aca:	68e3      	ldr	r3, [r4, #12]
  400acc:	6861      	ldr	r1, [r4, #4]
  400ace:	400b      	ands	r3, r1
  400ad0:	54d5      	strb	r5, [r2, r3]

	/*
	 * buffer full strategy: new data will overwrite the oldest data in
	 * the buffer
	 */
	if ((rb->write_index - rb->read_index) > rb->size) {
  400ad2:	68e3      	ldr	r3, [r4, #12]
  400ad4:	68a2      	ldr	r2, [r4, #8]
  400ad6:	1a9a      	subs	r2, r3, r2
  400ad8:	6861      	ldr	r1, [r4, #4]
  400ada:	428a      	cmp	r2, r1
  400adc:	d901      	bls.n	400ae2 <ringbuffer_put+0x2e>
		rb->read_index = rb->write_index - rb->size;
  400ade:	1a59      	subs	r1, r3, r1
  400ae0:	60a1      	str	r1, [r4, #8]
	}

	rb->write_index++;
  400ae2:	3301      	adds	r3, #1
  400ae4:	60e3      	str	r3, [r4, #12]

	return ERR_NONE;
}
  400ae6:	2000      	movs	r0, #0
  400ae8:	bd38      	pop	{r3, r4, r5, pc}
  400aea:	bf00      	nop
  400aec:	00401254 	.word	0x00401254
  400af0:	004009cd 	.word	0x004009cd

00400af4 <ringbuffer_num>:

/**
 * \brief Return the element number of ringbuffer
 */
uint32_t ringbuffer_num(const struct ringbuffer *const rb)
{
  400af4:	b510      	push	{r4, lr}
	ASSERT(rb);
  400af6:	4604      	mov	r4, r0
  400af8:	2267      	movs	r2, #103	; 0x67
  400afa:	4905      	ldr	r1, [pc, #20]	; (400b10 <ringbuffer_num+0x1c>)
  400afc:	3000      	adds	r0, #0
  400afe:	bf18      	it	ne
  400b00:	2001      	movne	r0, #1
  400b02:	4b04      	ldr	r3, [pc, #16]	; (400b14 <ringbuffer_num+0x20>)
  400b04:	4798      	blx	r3

	return rb->write_index - rb->read_index;
  400b06:	68e0      	ldr	r0, [r4, #12]
  400b08:	68a3      	ldr	r3, [r4, #8]
}
  400b0a:	1ac0      	subs	r0, r0, r3
  400b0c:	bd10      	pop	{r4, pc}
  400b0e:	bf00      	nop
  400b10:	00401254 	.word	0x00401254
  400b14:	004009cd 	.word	0x004009cd

00400b18 <_irq_set>:
/**
 * \brief Set the given IRQ
 */
void _irq_set(uint8_t n)
{
	NVIC_SetPendingIRQ((IRQn_Type)n);
  400b18:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  400b1a:	2b00      	cmp	r3, #0
  400b1c:	db09      	blt.n	400b32 <_irq_set+0x1a>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400b1e:	095b      	lsrs	r3, r3, #5
  400b20:	f000 001f 	and.w	r0, r0, #31
  400b24:	2201      	movs	r2, #1
  400b26:	fa02 f000 	lsl.w	r0, r2, r0
  400b2a:	3340      	adds	r3, #64	; 0x40
  400b2c:	4a01      	ldr	r2, [pc, #4]	; (400b34 <_irq_set+0x1c>)
  400b2e:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  400b32:	4770      	bx	lr
  400b34:	e000e100 	.word	0xe000e100

00400b38 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
  400b38:	b500      	push	{lr}
  400b3a:	b083      	sub	sp, #12
/**
 * \brief Enable FPU
 */
static inline void _fpu_enable(void)
{
	CRITICAL_SECTION_ENTER()
  400b3c:	a801      	add	r0, sp, #4
  400b3e:	4b0e      	ldr	r3, [pc, #56]	; (400b78 <_init_chip+0x40>)
  400b40:	4798      	blx	r3
	/** Set bits 20-23 to enable CP10 and CP11 coprocessors */
	SCB->CPACR |= (0xFu << 20);
  400b42:	4a0e      	ldr	r2, [pc, #56]	; (400b7c <_init_chip+0x44>)
  400b44:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
  400b48:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  400b4c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
  400b50:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  400b54:	f3bf 8f6f 	isb	sy
	__DSB();
	__ISB();
	CRITICAL_SECTION_LEAVE()
  400b58:	a801      	add	r0, sp, #4
  400b5a:	4b09      	ldr	r3, [pc, #36]	; (400b80 <_init_chip+0x48>)
  400b5c:	4798      	blx	r3

static inline void hri_efc_write_EEFC_FMR_FWS_bf(const void *const hw, hri_efc_eefc_fmr_reg_t data)
{
	uint32_t tmp;
	EFC_CRITICAL_SECTION_ENTER();
	tmp = ((Efc *)hw)->EEFC_FMR;
  400b5e:	4a09      	ldr	r2, [pc, #36]	; (400b84 <_init_chip+0x4c>)
  400b60:	6813      	ldr	r3, [r2, #0]
	tmp &= ~EEFC_FMR_FWS_Msk;
  400b62:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
	tmp |= EEFC_FMR_FWS(data);
  400b66:	f443 63a0 	orr.w	r3, r3, #1280	; 0x500
	((Efc *)hw)->EEFC_FMR = tmp;
  400b6a:	6013      	str	r3, [r2, #0]
#if CONF_DMA_ENABLE
	_pmc_enable_periph_clock(ID_XDMAC);
	_dma_init();

#endif
	_pmc_init();
  400b6c:	4b06      	ldr	r3, [pc, #24]	; (400b88 <_init_chip+0x50>)
  400b6e:	4798      	blx	r3
}
  400b70:	b003      	add	sp, #12
  400b72:	f85d fb04 	ldr.w	pc, [sp], #4
  400b76:	bf00      	nop
  400b78:	004004d5 	.word	0x004004d5
  400b7c:	e000ed00 	.word	0xe000ed00
  400b80:	004004e3 	.word	0x004004e3
  400b84:	400e0c00 	.word	0x400e0c00
  400b88:	00400c29 	.word	0x00400c29

00400b8c <_pmc_init_sources>:
	PMC_CRITICAL_SECTION_LEAVE();
}

static inline hri_pmc_ckgr_mor_reg_t hri_pmc_read_CKGR_MOR_reg(const void *const hw)
{
	return ((Pmc *)hw)->CKGR_MOR;
  400b8c:	490e      	ldr	r1, [pc, #56]	; (400bc8 <_pmc_init_sources+0x3c>)
  400b8e:	6a0a      	ldr	r2, [r1, #32]
	/* Enable Main XTAL oscillator */
	data = hri_pmc_read_CKGR_MOR_reg(PMC) & ~CKGR_MOR_MOSCXTEN;
	data |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY | CKGR_MOR_MOSCSEL;
	hri_pmc_write_CKGR_MOR_reg(PMC, data);
#else
	data = hri_pmc_read_CKGR_MOR_reg(PMC) & ~CKGR_MOR_MOSCXTBY;
  400b90:	f022 0202 	bic.w	r2, r2, #2
	data |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCXTST(CONF_XOSC20M_STARTUP_TIME);
  400b94:	4b0d      	ldr	r3, [pc, #52]	; (400bcc <_pmc_init_sources+0x40>)
  400b96:	4313      	orrs	r3, r2
	((Pmc *)hw)->CKGR_MOR = data;
  400b98:	620b      	str	r3, [r1, #32]
	return (((Pmc *)hw)->PMC_SR & PMC_SR_MOSCXTS) > 0;
  400b9a:	4b0b      	ldr	r3, [pc, #44]	; (400bc8 <_pmc_init_sources+0x3c>)
  400b9c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
	hri_pmc_write_CKGR_MOR_reg(PMC, data);
	while (!hri_pmc_get_SR_MOSCXTS_bit(PMC)) {
  400b9e:	f013 0f01 	tst.w	r3, #1
  400ba2:	d0fa      	beq.n	400b9a <_pmc_init_sources+0xe>
	((Pmc *)hw)->CKGR_MOR |= mask;
  400ba4:	4b08      	ldr	r3, [pc, #32]	; (400bc8 <_pmc_init_sources+0x3c>)
  400ba6:	6a19      	ldr	r1, [r3, #32]
  400ba8:	4a09      	ldr	r2, [pc, #36]	; (400bd0 <_pmc_init_sources+0x44>)
  400baa:	430a      	orrs	r2, r1
  400bac:	621a      	str	r2, [r3, #32]

static inline void hri_pmc_write_CKGR_PLLAR_MULA_bf(const void *const hw, hri_pmc_ckgr_pllar_reg_t data)
{
	uint32_t tmp;
	PMC_CRITICAL_SECTION_ENTER();
	tmp = ((Pmc *)hw)->CKGR_PLLAR;
  400bae:	6a99      	ldr	r1, [r3, #40]	; 0x28
	tmp &= ~CKGR_PLLAR_MULA_Msk;
  400bb0:	4a08      	ldr	r2, [pc, #32]	; (400bd4 <_pmc_init_sources+0x48>)
  400bb2:	400a      	ands	r2, r1
	tmp |= CKGR_PLLAR_MULA(data);
	((Pmc *)hw)->CKGR_PLLAR = tmp;
  400bb4:	629a      	str	r2, [r3, #40]	; 0x28
}

static inline void hri_pmc_write_CKGR_PLLAR_reg(const void *const hw, hri_pmc_ckgr_pllar_reg_t data)
{
	PMC_CRITICAL_SECTION_ENTER();
	((Pmc *)hw)->CKGR_PLLAR = data;
  400bb6:	4a08      	ldr	r2, [pc, #32]	; (400bd8 <_pmc_init_sources+0x4c>)
  400bb8:	629a      	str	r2, [r3, #40]	; 0x28
	return (((Pmc *)hw)->PMC_SR & PMC_SR_LOCKA) > 0;
  400bba:	4b03      	ldr	r3, [pc, #12]	; (400bc8 <_pmc_init_sources+0x3c>)
  400bbc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
#if (CONF_PLLACK_ENABLE == 1)
	data = CKGR_PLLAR_MULA(CONF_PLLACK_MUL - 1) | CKGR_PLLAR_DIVA(CONF_PLLACK_DIV) | CKGR_PLLAR_PLLACOUNT(PLL_COUNT);
	/* Stop PLL first */
	hri_pmc_write_CKGR_PLLAR_MULA_bf(PMC, 0);
	hri_pmc_write_CKGR_PLLAR_reg(PMC, (CKGR_PLLAR_ONE | data));
	while (!hri_pmc_get_SR_LOCKA_bit(PMC)) {
  400bbe:	f013 0f02 	tst.w	r3, #2
  400bc2:	d0fa      	beq.n	400bba <_pmc_init_sources+0x2e>
#if (CONF_CLK_CFDEN_ENABLE == 1)
	/* Enable main clock failure detection */
	hri_pmc_set_CKGR_MOR_CFDEN_bit(PMC);
#endif
#endif
}
  400bc4:	4770      	bx	lr
  400bc6:	bf00      	nop
  400bc8:	400e0600 	.word	0x400e0600
  400bcc:	00373e01 	.word	0x00373e01
  400bd0:	01370000 	.word	0x01370000
  400bd4:	f800ffff 	.word	0xf800ffff
  400bd8:	20183f01 	.word	0x20183f01

00400bdc <_pmc_init_master_clock>:

static inline void hri_pmc_write_MCKR_PRES_bf(const void *const hw, hri_pmc_mckr_reg_t data)
{
	uint32_t tmp;
	PMC_CRITICAL_SECTION_ENTER();
	tmp = ((Pmc *)hw)->PMC_MCKR;
  400bdc:	4a11      	ldr	r2, [pc, #68]	; (400c24 <_pmc_init_master_clock+0x48>)
  400bde:	6b13      	ldr	r3, [r2, #48]	; 0x30
	tmp &= ~PMC_MCKR_PRES_Msk;
  400be0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
	tmp |= PMC_MCKR_PRES(data);
	((Pmc *)hw)->PMC_MCKR = tmp;
  400be4:	6313      	str	r3, [r2, #48]	; 0x30
	return (((Pmc *)hw)->PMC_SR & PMC_SR_MCKRDY) > 0;
  400be6:	4b0f      	ldr	r3, [pc, #60]	; (400c24 <_pmc_init_master_clock+0x48>)
  400be8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
	while (!hri_pmc_get_SR_MCKRDY_bit(PMC)) {
		/* Wait until master clock is ready */
	}
#elif ((CONF_CLK_GEN_MCKR_SRC == CLK_SRC_OPTION_PLLACK) || (CONF_CLK_GEN_MCKR_SRC == CLK_SRC_OPTION_UPLLCKDIV))
	hri_pmc_write_MCKR_PRES_bf(PMC, CONF_MCKR_PRESC);
	while (!hri_pmc_get_SR_MCKRDY_bit(PMC)) {
  400bea:	f013 0f08 	tst.w	r3, #8
  400bee:	d0fa      	beq.n	400be6 <_pmc_init_master_clock+0xa>

static inline void hri_pmc_write_MCKR_MDIV_bf(const void *const hw, hri_pmc_mckr_reg_t data)
{
	uint32_t tmp;
	PMC_CRITICAL_SECTION_ENTER();
	tmp = ((Pmc *)hw)->PMC_MCKR;
  400bf0:	4a0c      	ldr	r2, [pc, #48]	; (400c24 <_pmc_init_master_clock+0x48>)
  400bf2:	6b13      	ldr	r3, [r2, #48]	; 0x30
	tmp &= ~PMC_MCKR_MDIV_Msk;
  400bf4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
	tmp |= PMC_MCKR_MDIV(data);
  400bf8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
	((Pmc *)hw)->PMC_MCKR = tmp;
  400bfc:	6313      	str	r3, [r2, #48]	; 0x30
	return (((Pmc *)hw)->PMC_SR & PMC_SR_MCKRDY) > 0;
  400bfe:	4b09      	ldr	r3, [pc, #36]	; (400c24 <_pmc_init_master_clock+0x48>)
  400c00:	6e9b      	ldr	r3, [r3, #104]	; 0x68
		/* Wait until master clock is ready */
	}
	hri_pmc_write_MCKR_MDIV_bf(PMC, CONF_MCK_DIV);
	while (!hri_pmc_get_SR_MCKRDY_bit(PMC)) {
  400c02:	f013 0f08 	tst.w	r3, #8
  400c06:	d0fa      	beq.n	400bfe <_pmc_init_master_clock+0x22>
	tmp = ((Pmc *)hw)->PMC_MCKR;
  400c08:	4a06      	ldr	r2, [pc, #24]	; (400c24 <_pmc_init_master_clock+0x48>)
  400c0a:	6b13      	ldr	r3, [r2, #48]	; 0x30
	tmp &= ~PMC_MCKR_CSS_Msk;
  400c0c:	f023 0303 	bic.w	r3, r3, #3
	tmp |= PMC_MCKR_CSS(data);
  400c10:	f043 0302 	orr.w	r3, r3, #2
	((Pmc *)hw)->PMC_MCKR = tmp;
  400c14:	6313      	str	r3, [r2, #48]	; 0x30
	return (((Pmc *)hw)->PMC_SR & PMC_SR_MCKRDY) > 0;
  400c16:	4b03      	ldr	r3, [pc, #12]	; (400c24 <_pmc_init_master_clock+0x48>)
  400c18:	6e9b      	ldr	r3, [r3, #104]	; 0x68
		/* Wait until master clock is ready */
	}
	hri_pmc_write_MCKR_CSS_bf(PMC, CONF_CLK_GEN_MCKR_SRC);
	while (!hri_pmc_get_SR_MCKRDY_bit(PMC)) {
  400c1a:	f013 0f08 	tst.w	r3, #8
  400c1e:	d0fa      	beq.n	400c16 <_pmc_init_master_clock+0x3a>
		/* Wait until master clock is ready */
	}
#endif
#endif
}
  400c20:	4770      	bx	lr
  400c22:	bf00      	nop
  400c24:	400e0600 	.word	0x400e0600

00400c28 <_pmc_init>:
/**
 * \brief Initializes cortex M7 core clock
 *
 */
void _pmc_init(void)
{
  400c28:	b508      	push	{r3, lr}
	_pmc_init_sources();
  400c2a:	4b02      	ldr	r3, [pc, #8]	; (400c34 <_pmc_init+0xc>)
  400c2c:	4798      	blx	r3
	_pmc_init_master_clock();
  400c2e:	4b02      	ldr	r3, [pc, #8]	; (400c38 <_pmc_init+0x10>)
  400c30:	4798      	blx	r3
  400c32:	bd08      	pop	{r3, pc}
  400c34:	00400b8d 	.word	0x00400b8d
  400c38:	00400bdd 	.word	0x00400bdd

00400c3c <get_cfg>:

static struct tc_configuration *get_cfg(void *hw)
{
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
  400c3c:	2300      	movs	r3, #0
  400c3e:	b13b      	cbz	r3, 400c50 <get_cfg+0x14>
		if (_tcs[i].hw == hw) {
			return &(_tcs[i]);
		}
	}

	return NULL;
  400c40:	2000      	movs	r0, #0
  400c42:	4770      	bx	lr
			return &(_tcs[i]);
  400c44:	eb03 04c3 	add.w	r4, r3, r3, lsl #3
  400c48:	00a3      	lsls	r3, r4, #2
  400c4a:	4608      	mov	r0, r1
  400c4c:	4418      	add	r0, r3
  400c4e:	e00c      	b.n	400c6a <get_cfg+0x2e>
{
  400c50:	b410      	push	{r4}
		if (_tcs[i].hw == hw) {
  400c52:	eb03 01c3 	add.w	r1, r3, r3, lsl #3
  400c56:	008a      	lsls	r2, r1, #2
  400c58:	4905      	ldr	r1, [pc, #20]	; (400c70 <get_cfg+0x34>)
  400c5a:	588a      	ldr	r2, [r1, r2]
  400c5c:	4282      	cmp	r2, r0
  400c5e:	d0f1      	beq.n	400c44 <get_cfg+0x8>
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
  400c60:	3301      	adds	r3, #1
  400c62:	b2db      	uxtb	r3, r3
  400c64:	2b00      	cmp	r3, #0
  400c66:	d0f4      	beq.n	400c52 <get_cfg+0x16>
	return NULL;
  400c68:	2000      	movs	r0, #0
}
  400c6a:	f85d 4b04 	ldr.w	r4, [sp], #4
  400c6e:	4770      	bx	lr
  400c70:	20400010 	.word	0x20400010

00400c74 <_tc_init_irq_param>:
/**
 * \brief Init irq param with the given tc hardware instance
 */
static void _tc_init_irq_param(const void *const hw, void *dev)
{
	if (hw == TC0) {
  400c74:	4b03      	ldr	r3, [pc, #12]	; (400c84 <_tc_init_irq_param+0x10>)
  400c76:	4298      	cmp	r0, r3
  400c78:	d000      	beq.n	400c7c <_tc_init_irq_param+0x8>
  400c7a:	4770      	bx	lr
		_tc0_dev = (struct _timer_device *)dev;
  400c7c:	4b02      	ldr	r3, [pc, #8]	; (400c88 <_tc_init_irq_param+0x14>)
  400c7e:	6019      	str	r1, [r3, #0]
	}
}
  400c80:	e7fb      	b.n	400c7a <_tc_init_irq_param+0x6>
  400c82:	bf00      	nop
  400c84:	4000c000 	.word	0x4000c000
  400c88:	20400078 	.word	0x20400078

00400c8c <tc_interrupt_handler>:
 * \internal TC interrupt handler
 *
 * \param[in] instance TC instance number
 */
static void tc_interrupt_handler(struct _timer_device *device)
{
  400c8c:	b508      	push	{r3, lr}
	void *const hw = device->hw;
  400c8e:	68c3      	ldr	r3, [r0, #12]
	return (((Tc *)hw)->TcChannel[submodule_index].TC_SR & TC_SR_CPBS) > 0;
}

static inline bool hri_tc_get_SR_CPCS_bit(const void *const hw, uint8_t submodule_index)
{
	return (((Tc *)hw)->TcChannel[submodule_index].TC_SR & TC_SR_CPCS) > 0;
  400c90:	6a1b      	ldr	r3, [r3, #32]

	if (hri_tc_get_SR_CPCS_bit(hw, 0)) {
  400c92:	f013 0f10 	tst.w	r3, #16
  400c96:	d100      	bne.n	400c9a <tc_interrupt_handler+0xe>
  400c98:	bd08      	pop	{r3, pc}
		device->timer_cb.period_expired(device);
  400c9a:	6803      	ldr	r3, [r0, #0]
  400c9c:	4798      	blx	r3
	}
}
  400c9e:	e7fb      	b.n	400c98 <tc_interrupt_handler+0xc>

00400ca0 <_timer_init>:
{
  400ca0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  400ca2:	4607      	mov	r7, r0
  400ca4:	460c      	mov	r4, r1
	struct tc_configuration *cfg     = get_cfg(hw);
  400ca6:	4608      	mov	r0, r1
  400ca8:	4b27      	ldr	r3, [pc, #156]	; (400d48 <_timer_init+0xa8>)
  400caa:	4798      	blx	r3
  400cac:	4605      	mov	r5, r0
	uint32_t                 ch_mode = cfg->channel_mode;
  400cae:	6886      	ldr	r6, [r0, #8]
	device->hw = hw;
  400cb0:	60fc      	str	r4, [r7, #12]
	ASSERT(ARRAY_SIZE(_tcs));
  400cb2:	2291      	movs	r2, #145	; 0x91
  400cb4:	4925      	ldr	r1, [pc, #148]	; (400d4c <_timer_init+0xac>)
  400cb6:	2001      	movs	r0, #1
  400cb8:	4b25      	ldr	r3, [pc, #148]	; (400d50 <_timer_init+0xb0>)
  400cba:	4798      	blx	r3
	if (ch_mode & TC_CMR_WAVE) {
  400cbc:	f416 4f00 	tst.w	r6, #32768	; 0x8000
  400cc0:	d001      	beq.n	400cc6 <_timer_init+0x26>
		ch_mode |= (0x02 << 13) | (0x01 << 16) | (0x02 << 18);
  400cc2:	f446 2614 	orr.w	r6, r6, #606208	; 0x94000
}

static inline void hri_tc_write_CMR_reg(const void *const hw, uint8_t submodule_index, hri_tc_cmr_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->TcChannel[submodule_index].TC_CMR = data;
  400cc6:	6066      	str	r6, [r4, #4]
	hri_tc_write_RA_reg(hw, 0, cfg->ra);
  400cc8:	696b      	ldr	r3, [r5, #20]
}

static inline void hri_tc_write_RA_reg(const void *const hw, uint8_t submodule_index, hri_tc_ra_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->TcChannel[submodule_index].TC_RA = data;
  400cca:	6163      	str	r3, [r4, #20]
	hri_tc_write_RB_reg(hw, 0, cfg->rb);
  400ccc:	69ab      	ldr	r3, [r5, #24]
}

static inline void hri_tc_write_RB_reg(const void *const hw, uint8_t submodule_index, hri_tc_rb_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->TcChannel[submodule_index].TC_RB = data;
  400cce:	61a3      	str	r3, [r4, #24]
	hri_tc_write_EMR_reg(hw, 0, cfg->ext_mode);
  400cd0:	68eb      	ldr	r3, [r5, #12]
}

static inline void hri_tc_write_EMR_reg(const void *const hw, uint8_t submodule_index, hri_tc_emr_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->TcChannel[submodule_index].TC_EMR = data;
  400cd2:	6323      	str	r3, [r4, #48]	; 0x30
	hri_tc_write_RC_reg(hw, 0, cfg->rc);
  400cd4:	69eb      	ldr	r3, [r5, #28]
	((Tc *)hw)->TcChannel[submodule_index].TC_RC = data;
  400cd6:	61e3      	str	r3, [r4, #28]
	((Tc *)hw)->TcChannel[submodule_index].TC_IER = mask;
  400cd8:	2310      	movs	r3, #16
  400cda:	6263      	str	r3, [r4, #36]	; 0x24
	hri_tc_write_FMR_reg(hw, cfg->fmr);
  400cdc:	692b      	ldr	r3, [r5, #16]
}

static inline void hri_tc_write_FMR_reg(const void *const hw, hri_tc_fmr_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->TC_FMR = data;
  400cde:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
	_tc_init_irq_param(hw, device);
  400ce2:	4639      	mov	r1, r7
  400ce4:	4620      	mov	r0, r4
  400ce6:	4b1b      	ldr	r3, [pc, #108]	; (400d54 <_timer_init+0xb4>)
  400ce8:	4798      	blx	r3
	NVIC_DisableIRQ(cfg->irq);
  400cea:	f995 3004 	ldrsb.w	r3, [r5, #4]
  if ((int32_t)(IRQn) >= 0)
  400cee:	2b00      	cmp	r3, #0
  400cf0:	db0d      	blt.n	400d0e <_timer_init+0x6e>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400cf2:	095a      	lsrs	r2, r3, #5
  400cf4:	f003 031f 	and.w	r3, r3, #31
  400cf8:	2101      	movs	r1, #1
  400cfa:	fa01 f303 	lsl.w	r3, r1, r3
  400cfe:	3220      	adds	r2, #32
  400d00:	4915      	ldr	r1, [pc, #84]	; (400d58 <_timer_init+0xb8>)
  400d02:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
  400d06:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  400d0a:	f3bf 8f6f 	isb	sy
	NVIC_ClearPendingIRQ(cfg->irq);
  400d0e:	f995 3004 	ldrsb.w	r3, [r5, #4]
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  400d12:	2b00      	cmp	r3, #0
  400d14:	db09      	blt.n	400d2a <_timer_init+0x8a>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400d16:	095a      	lsrs	r2, r3, #5
  400d18:	f003 031f 	and.w	r3, r3, #31
  400d1c:	2101      	movs	r1, #1
  400d1e:	fa01 f303 	lsl.w	r3, r1, r3
  400d22:	3260      	adds	r2, #96	; 0x60
  400d24:	490c      	ldr	r1, [pc, #48]	; (400d58 <_timer_init+0xb8>)
  400d26:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
	NVIC_EnableIRQ(cfg->irq);
  400d2a:	f995 3004 	ldrsb.w	r3, [r5, #4]
  if ((int32_t)(IRQn) >= 0)
  400d2e:	2b00      	cmp	r3, #0
  400d30:	db08      	blt.n	400d44 <_timer_init+0xa4>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400d32:	0959      	lsrs	r1, r3, #5
  400d34:	f003 031f 	and.w	r3, r3, #31
  400d38:	2201      	movs	r2, #1
  400d3a:	fa02 f303 	lsl.w	r3, r2, r3
  400d3e:	4a06      	ldr	r2, [pc, #24]	; (400d58 <_timer_init+0xb8>)
  400d40:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
  400d44:	2000      	movs	r0, #0
  400d46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400d48:	00400c3d 	.word	0x00400c3d
  400d4c:	00401278 	.word	0x00401278
  400d50:	004009cd 	.word	0x004009cd
  400d54:	00400c75 	.word	0x00400c75
  400d58:	e000e100 	.word	0xe000e100

00400d5c <_timer_start>:
	hri_tc_write_CCR_reg(device->hw, 0, TC_CCR_CLKEN | TC_CCR_SWTRG);
  400d5c:	68c3      	ldr	r3, [r0, #12]
	((Tc *)hw)->TcChannel[submodule_index].TC_CCR = data;
  400d5e:	2205      	movs	r2, #5
  400d60:	601a      	str	r2, [r3, #0]
  400d62:	4770      	bx	lr

00400d64 <_timer_is_started>:
	return hri_tc_get_SR_CLKSTA_bit(device->hw, 0);
  400d64:	68c3      	ldr	r3, [r0, #12]
	return (((Tc *)hw)->TcChannel[submodule_index].TC_SR & TC_SR_CLKSTA) > 0;
  400d66:	6a18      	ldr	r0, [r3, #32]
}
  400d68:	f3c0 4000 	ubfx	r0, r0, #16, #1
  400d6c:	4770      	bx	lr
	...

00400d70 <_timer_set_irq>:
{
  400d70:	b508      	push	{r3, lr}
	struct tc_configuration *cfg = get_cfg(device->hw);
  400d72:	68c0      	ldr	r0, [r0, #12]
  400d74:	4b02      	ldr	r3, [pc, #8]	; (400d80 <_timer_set_irq+0x10>)
  400d76:	4798      	blx	r3
	_irq_set((IRQn_Type)(cfg->irq));
  400d78:	7900      	ldrb	r0, [r0, #4]
  400d7a:	4b02      	ldr	r3, [pc, #8]	; (400d84 <_timer_set_irq+0x14>)
  400d7c:	4798      	blx	r3
  400d7e:	bd08      	pop	{r3, pc}
  400d80:	00400c3d 	.word	0x00400c3d
  400d84:	00400b19 	.word	0x00400b19

00400d88 <_tc_get_timer>:
 * \brief Retrieve timer helper functions
 */
struct _timer_hpl_interface *_tc_get_timer(void)
{
	return NULL;
}
  400d88:	2000      	movs	r0, #0
  400d8a:	4770      	bx	lr

00400d8c <TC0_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC0_Handler(void)
{
  400d8c:	b508      	push	{r3, lr}
	tc_interrupt_handler(_tc0_dev);
  400d8e:	4b02      	ldr	r3, [pc, #8]	; (400d98 <TC0_Handler+0xc>)
  400d90:	6818      	ldr	r0, [r3, #0]
  400d92:	4b02      	ldr	r3, [pc, #8]	; (400d9c <TC0_Handler+0x10>)
  400d94:	4798      	blx	r3
  400d96:	bd08      	pop	{r3, pc}
  400d98:	20400078 	.word	0x20400078
  400d9c:	00400c8d 	.word	0x00400c8d

00400da0 <_usart_init_irq_param>:
/**
 * \brief Init irq param with the given usart hardware instance
 */
static void _usart_init_irq_param(const void *const hw, struct _usart_async_device *dev)
{
	if (hw == USART1) {
  400da0:	4b03      	ldr	r3, [pc, #12]	; (400db0 <_usart_init_irq_param+0x10>)
  400da2:	4298      	cmp	r0, r3
  400da4:	d000      	beq.n	400da8 <_usart_init_irq_param+0x8>
  400da6:	4770      	bx	lr
		_usart1_dev = dev;
  400da8:	4b02      	ldr	r3, [pc, #8]	; (400db4 <_usart_init_irq_param+0x14>)
  400daa:	6019      	str	r1, [r3, #0]
	}
}
  400dac:	e7fb      	b.n	400da6 <_usart_init_irq_param+0x6>
  400dae:	bf00      	nop
  400db0:	40028000 	.word	0x40028000
  400db4:	2040007c 	.word	0x2040007c

00400db8 <_usart_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given usart hardware instance
 */
static uint8_t _usart_get_hardware_index(const void *const hw)
{
  400db8:	b510      	push	{r4, lr}
	ASSERT(hw);
  400dba:	4604      	mov	r4, r0
  400dbc:	f240 222f 	movw	r2, #559	; 0x22f
  400dc0:	4905      	ldr	r1, [pc, #20]	; (400dd8 <_usart_get_hardware_index+0x20>)
  400dc2:	3000      	adds	r0, #0
  400dc4:	bf18      	it	ne
  400dc6:	2001      	movne	r0, #1
  400dc8:	4b04      	ldr	r3, [pc, #16]	; (400ddc <_usart_get_hardware_index+0x24>)
  400dca:	4798      	blx	r3

#ifdef _UNIT_TEST_
	return ((uint32_t)hw - (uint32_t)USART0) / sizeof(Usart);
#endif

	return ((uint32_t)hw - (uint32_t)USART0) >> 14;
  400dcc:	4804      	ldr	r0, [pc, #16]	; (400de0 <_usart_get_hardware_index+0x28>)
  400dce:	4420      	add	r0, r4
}
  400dd0:	f3c0 3087 	ubfx	r0, r0, #14, #8
  400dd4:	bd10      	pop	{r4, pc}
  400dd6:	bf00      	nop
  400dd8:	00401298 	.word	0x00401298
  400ddc:	004009cd 	.word	0x004009cd
  400de0:	bffdc000 	.word	0xbffdc000

00400de4 <_get_usart_index>:
 * \param[in] hw The pointer to hardware instance

 * \return The ordinal number of the given usart hardware instance
 */
static uint8_t _get_usart_index(const void *const hw)
{
  400de4:	b510      	push	{r4, lr}
	ASSERT(hw);
  400de6:	4604      	mov	r4, r0
  400de8:	f44f 722d 	mov.w	r2, #692	; 0x2b4
  400dec:	490e      	ldr	r1, [pc, #56]	; (400e28 <_get_usart_index+0x44>)
  400dee:	3000      	adds	r0, #0
  400df0:	bf18      	it	ne
  400df2:	2001      	movne	r0, #1
  400df4:	4b0d      	ldr	r3, [pc, #52]	; (400e2c <_get_usart_index+0x48>)
  400df6:	4798      	blx	r3
	uint8_t usart_offset = _usart_get_hardware_index(hw);
  400df8:	4620      	mov	r0, r4
  400dfa:	4b0d      	ldr	r3, [pc, #52]	; (400e30 <_get_usart_index+0x4c>)
  400dfc:	4798      	blx	r3
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
  400dfe:	2300      	movs	r3, #0
  400e00:	b143      	cbz	r3, 400e14 <_get_usart_index+0x30>
		if (_usarts[i].number == usart_offset) {
			return i;
		}
	}

	ASSERT(false);
  400e02:	f240 22be 	movw	r2, #702	; 0x2be
  400e06:	4908      	ldr	r1, [pc, #32]	; (400e28 <_get_usart_index+0x44>)
  400e08:	2000      	movs	r0, #0
  400e0a:	4b08      	ldr	r3, [pc, #32]	; (400e2c <_get_usart_index+0x48>)
  400e0c:	4798      	blx	r3
	return 0;
  400e0e:	2300      	movs	r3, #0
}
  400e10:	4618      	mov	r0, r3
  400e12:	bd10      	pop	{r4, pc}
		if (_usarts[i].number == usart_offset) {
  400e14:	eb03 0143 	add.w	r1, r3, r3, lsl #1
  400e18:	008a      	lsls	r2, r1, #2
  400e1a:	4906      	ldr	r1, [pc, #24]	; (400e34 <_get_usart_index+0x50>)
  400e1c:	5c8a      	ldrb	r2, [r1, r2]
  400e1e:	4290      	cmp	r0, r2
  400e20:	d0f6      	beq.n	400e10 <_get_usart_index+0x2c>
	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
  400e22:	3301      	adds	r3, #1
  400e24:	b2db      	uxtb	r3, r3
  400e26:	e7eb      	b.n	400e00 <_get_usart_index+0x1c>
  400e28:	00401298 	.word	0x00401298
  400e2c:	004009cd 	.word	0x004009cd
  400e30:	00400db9 	.word	0x00400db9
  400e34:	0040128c 	.word	0x0040128c

00400e38 <_usart_init>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The status of initialization
 */
static int32_t _usart_init(void *const hw)
{
  400e38:	b510      	push	{r4, lr}
	ASSERT(hw);
  400e3a:	4604      	mov	r4, r0
  400e3c:	f240 22cb 	movw	r2, #715	; 0x2cb
  400e40:	4911      	ldr	r1, [pc, #68]	; (400e88 <_usart_init+0x50>)
  400e42:	3000      	adds	r0, #0
  400e44:	bf18      	it	ne
  400e46:	2001      	movne	r0, #1
  400e48:	4b10      	ldr	r3, [pc, #64]	; (400e8c <_usart_init+0x54>)
  400e4a:	4798      	blx	r3
	uint8_t i = _get_usart_index(hw);
  400e4c:	4620      	mov	r0, r4
  400e4e:	4b10      	ldr	r3, [pc, #64]	; (400e90 <_usart_init+0x58>)
  400e50:	4798      	blx	r3
}

static inline void hri_usart_write_US_WPMR_reg(const void *const hw, hri_usart_us_wpmr_reg_t data)
{
	USART_CRITICAL_SECTION_ENTER();
	((Usart *)hw)->US_WPMR = data;
  400e52:	4b10      	ldr	r3, [pc, #64]	; (400e94 <_usart_init+0x5c>)
  400e54:	f8c4 30e4 	str.w	r3, [r4, #228]	; 0xe4
	((Usart *)hw)->US_MR = data;
  400e58:	2300      	movs	r3, #0
  400e5a:	6063      	str	r3, [r4, #4]
	((Usart *)hw)->US_RTOR = data;
  400e5c:	6263      	str	r3, [r4, #36]	; 0x24
	((Usart *)hw)->US_TTGR = data;
  400e5e:	62a3      	str	r3, [r4, #40]	; 0x28
}

static inline void hri_usart_write_US_CR_reg(const void *const hw, hri_usart_us_cr_reg_t data)
{
	USART_CRITICAL_SECTION_ENTER();
	((Usart *)hw)->US_CR = data;
  400e60:	22ac      	movs	r2, #172	; 0xac
  400e62:	6022      	str	r2, [r4, #0]
  400e64:	f44f 7280 	mov.w	r2, #256	; 0x100
  400e68:	6022      	str	r2, [r4, #0]
  400e6a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  400e6e:	6022      	str	r2, [r4, #0]
	/* Reset status bits. */
	hri_usart_write_US_CR_reg(hw, US_CR_RSTSTA);
	/* Turn off RTS and DTR if exist. */
	hri_usart_write_US_CR_reg(hw, US_CR_USART_RTSDIS);

	hri_usart_write_US_MR_reg(hw, _usarts[i].us_mr);
  400e70:	eb00 0040 	add.w	r0, r0, r0, lsl #1
  400e74:	0081      	lsls	r1, r0, #2
  400e76:	4a08      	ldr	r2, [pc, #32]	; (400e98 <_usart_init+0x60>)
  400e78:	440a      	add	r2, r1
  400e7a:	6852      	ldr	r2, [r2, #4]
	((Usart *)hw)->US_MR = data;
  400e7c:	6062      	str	r2, [r4, #4]
	((Usart *)hw)->US_BRGR = data;
  400e7e:	4a07      	ldr	r2, [pc, #28]	; (400e9c <_usart_init+0x64>)
  400e80:	6222      	str	r2, [r4, #32]
	hri_usart_write_US_BRGR_reg(hw, _usarts[i].us_brgr);

	return ERR_NONE;
}
  400e82:	4618      	mov	r0, r3
  400e84:	bd10      	pop	{r4, pc}
  400e86:	bf00      	nop
  400e88:	00401298 	.word	0x00401298
  400e8c:	004009cd 	.word	0x004009cd
  400e90:	00400de5 	.word	0x00400de5
  400e94:	55534100 	.word	0x55534100
  400e98:	0040128c 	.word	0x0040128c
  400e9c:	000403d0 	.word	0x000403d0

00400ea0 <_usart_get_irq_num>:
{
  400ea0:	b510      	push	{r4, lr}
	ASSERT(hw);
  400ea2:	4604      	mov	r4, r0
  400ea4:	22ae      	movs	r2, #174	; 0xae
  400ea6:	4906      	ldr	r1, [pc, #24]	; (400ec0 <_usart_get_irq_num+0x20>)
  400ea8:	3000      	adds	r0, #0
  400eaa:	bf18      	it	ne
  400eac:	2001      	movne	r0, #1
  400eae:	4b05      	ldr	r3, [pc, #20]	; (400ec4 <_usart_get_irq_num+0x24>)
  400eb0:	4798      	blx	r3
	return USART0_IRQn + _usart_get_hardware_index(hw);
  400eb2:	4620      	mov	r0, r4
  400eb4:	4b04      	ldr	r3, [pc, #16]	; (400ec8 <_usart_get_irq_num+0x28>)
  400eb6:	4798      	blx	r3
  400eb8:	300d      	adds	r0, #13
}
  400eba:	b2c0      	uxtb	r0, r0
  400ebc:	bd10      	pop	{r4, pc}
  400ebe:	bf00      	nop
  400ec0:	00401298 	.word	0x00401298
  400ec4:	004009cd 	.word	0x004009cd
  400ec8:	00400db9 	.word	0x00400db9

00400ecc <_usart_interrupt_handler>:
{
  400ecc:	b510      	push	{r4, lr}
	ASSERT(device);
  400ece:	4604      	mov	r4, r0
  400ed0:	f240 2289 	movw	r2, #649	; 0x289
  400ed4:	4923      	ldr	r1, [pc, #140]	; (400f64 <_usart_interrupt_handler+0x98>)
  400ed6:	3000      	adds	r0, #0
  400ed8:	bf18      	it	ne
  400eda:	2001      	movne	r0, #1
  400edc:	4b22      	ldr	r3, [pc, #136]	; (400f68 <_usart_interrupt_handler+0x9c>)
  400ede:	4798      	blx	r3
	void *hw = device->hw;
  400ee0:	69a3      	ldr	r3, [r4, #24]
	return (((Usart *)hw)->US_CSR & US_CSR_TXRDY) > 0;
  400ee2:	695a      	ldr	r2, [r3, #20]
	if (hri_usart_get_US_CSR_TXRDY_bit(hw) && hri_usart_get_US_IMR_TXRDY_bit(hw)) {
  400ee4:	f012 0f02 	tst.w	r2, #2
  400ee8:	d003      	beq.n	400ef2 <_usart_interrupt_handler+0x26>
	return (((Usart *)hw)->US_IMR & US_IMR_TXRDY) >> US_IMR_TXRDY_Pos;
  400eea:	691a      	ldr	r2, [r3, #16]
  400eec:	f012 0f02 	tst.w	r2, #2
  400ef0:	d118      	bne.n	400f24 <_usart_interrupt_handler+0x58>
	return (((Usart *)hw)->US_CSR & US_CSR_TXEMPTY) > 0;
  400ef2:	695a      	ldr	r2, [r3, #20]
	} else if (hri_usart_get_US_CSR_TXEMPTY_bit(hw) && hri_usart_get_US_IMR_TXEMPTY_bit(hw)) {
  400ef4:	f412 7f00 	tst.w	r2, #512	; 0x200
  400ef8:	d003      	beq.n	400f02 <_usart_interrupt_handler+0x36>
	return (((Usart *)hw)->US_IMR & US_IMR_TXEMPTY) >> US_IMR_TXEMPTY_Pos;
  400efa:	691a      	ldr	r2, [r3, #16]
  400efc:	f412 7f00 	tst.w	r2, #512	; 0x200
  400f00:	d116      	bne.n	400f30 <_usart_interrupt_handler+0x64>
	return (((Usart *)hw)->US_CSR & US_CSR_RXRDY) > 0;
  400f02:	695a      	ldr	r2, [r3, #20]
	} else if (hri_usart_get_US_CSR_RXRDY_bit(hw) && hri_usart_get_US_IMR_RXRDY_bit(hw)) {
  400f04:	f012 0f01 	tst.w	r2, #1
  400f08:	d01f      	beq.n	400f4a <_usart_interrupt_handler+0x7e>
	return (((Usart *)hw)->US_IMR & US_IMR_RXRDY) >> US_IMR_RXRDY_Pos;
  400f0a:	691a      	ldr	r2, [r3, #16]
  400f0c:	f012 0f01 	tst.w	r2, #1
  400f10:	d01b      	beq.n	400f4a <_usart_interrupt_handler+0x7e>
	return ((Usart *)hw)->US_CSR;
  400f12:	6959      	ldr	r1, [r3, #20]
		if (hri_usart_read_US_CSR_reg(hw) &
  400f14:	4a15      	ldr	r2, [pc, #84]	; (400f6c <_usart_interrupt_handler+0xa0>)
  400f16:	4211      	tst	r1, r2
  400f18:	d011      	beq.n	400f3e <_usart_interrupt_handler+0x72>
	return ((Usart *)hw)->US_RHR;
  400f1a:	699a      	ldr	r2, [r3, #24]
	((Usart *)hw)->US_CR = data;
  400f1c:	f44f 7280 	mov.w	r2, #256	; 0x100
  400f20:	601a      	str	r2, [r3, #0]
  400f22:	bd10      	pop	{r4, pc}
	((Usart *)hw)->US_IDR = US_IMR_TXRDY;
  400f24:	2202      	movs	r2, #2
  400f26:	60da      	str	r2, [r3, #12]
		device->usart_cb.tx_byte_sent(device);
  400f28:	6823      	ldr	r3, [r4, #0]
  400f2a:	4620      	mov	r0, r4
  400f2c:	4798      	blx	r3
  400f2e:	bd10      	pop	{r4, pc}
	((Usart *)hw)->US_IDR = US_IMR_TXEMPTY;
  400f30:	f44f 7200 	mov.w	r2, #512	; 0x200
  400f34:	60da      	str	r2, [r3, #12]
		device->usart_cb.tx_done_cb(device);
  400f36:	68a3      	ldr	r3, [r4, #8]
  400f38:	4620      	mov	r0, r4
  400f3a:	4798      	blx	r3
  400f3c:	bd10      	pop	{r4, pc}
		device->usart_cb.rx_done_cb(device, (uint8_t)hri_usart_read_US_RHR_reg(hw));
  400f3e:	6862      	ldr	r2, [r4, #4]
	return ((Usart *)hw)->US_RHR;
  400f40:	6999      	ldr	r1, [r3, #24]
  400f42:	b2c9      	uxtb	r1, r1
  400f44:	4620      	mov	r0, r4
  400f46:	4790      	blx	r2
  400f48:	bd10      	pop	{r4, pc}
	return ((Usart *)hw)->US_CSR;
  400f4a:	6959      	ldr	r1, [r3, #20]
	} else if (hri_usart_read_US_CSR_reg(hw) &
  400f4c:	4a07      	ldr	r2, [pc, #28]	; (400f6c <_usart_interrupt_handler+0xa0>)
  400f4e:	4211      	tst	r1, r2
  400f50:	d100      	bne.n	400f54 <_usart_interrupt_handler+0x88>
  400f52:	bd10      	pop	{r4, pc}
	((Usart *)hw)->US_CR = data;
  400f54:	f44f 7280 	mov.w	r2, #256	; 0x100
  400f58:	601a      	str	r2, [r3, #0]
		device->usart_cb.error_cb(device);
  400f5a:	68e3      	ldr	r3, [r4, #12]
  400f5c:	4620      	mov	r0, r4
  400f5e:	4798      	blx	r3
  400f60:	e7f7      	b.n	400f52 <_usart_interrupt_handler+0x86>
  400f62:	bf00      	nop
  400f64:	00401298 	.word	0x00401298
  400f68:	004009cd 	.word	0x004009cd
  400f6c:	010000e0 	.word	0x010000e0

00400f70 <_usart_async_init>:
{
  400f70:	b570      	push	{r4, r5, r6, lr}
  400f72:	460c      	mov	r4, r1
	ASSERT(device);
  400f74:	4606      	mov	r6, r0
  400f76:	22d1      	movs	r2, #209	; 0xd1
  400f78:	4922      	ldr	r1, [pc, #136]	; (401004 <_usart_async_init+0x94>)
  400f7a:	3000      	adds	r0, #0
  400f7c:	bf18      	it	ne
  400f7e:	2001      	movne	r0, #1
  400f80:	4b21      	ldr	r3, [pc, #132]	; (401008 <_usart_async_init+0x98>)
  400f82:	4798      	blx	r3
	init_status = _usart_init(hw);
  400f84:	4620      	mov	r0, r4
  400f86:	4b21      	ldr	r3, [pc, #132]	; (40100c <_usart_async_init+0x9c>)
  400f88:	4798      	blx	r3
	if (init_status) {
  400f8a:	4605      	mov	r5, r0
  400f8c:	b108      	cbz	r0, 400f92 <_usart_async_init+0x22>
}
  400f8e:	4628      	mov	r0, r5
  400f90:	bd70      	pop	{r4, r5, r6, pc}
	device->hw = hw;
  400f92:	61b4      	str	r4, [r6, #24]
	_usart_init_irq_param(hw, device);
  400f94:	4631      	mov	r1, r6
  400f96:	4620      	mov	r0, r4
  400f98:	4b1d      	ldr	r3, [pc, #116]	; (401010 <_usart_async_init+0xa0>)
  400f9a:	4798      	blx	r3
	NVIC_DisableIRQ((IRQn_Type)_usart_get_irq_num(hw));
  400f9c:	4620      	mov	r0, r4
  400f9e:	4b1d      	ldr	r3, [pc, #116]	; (401014 <_usart_async_init+0xa4>)
  400fa0:	4798      	blx	r3
  400fa2:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
  400fa4:	2b00      	cmp	r3, #0
  400fa6:	db0d      	blt.n	400fc4 <_usart_async_init+0x54>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400fa8:	095b      	lsrs	r3, r3, #5
  400faa:	f000 001f 	and.w	r0, r0, #31
  400fae:	2201      	movs	r2, #1
  400fb0:	fa02 f000 	lsl.w	r0, r2, r0
  400fb4:	3320      	adds	r3, #32
  400fb6:	4a18      	ldr	r2, [pc, #96]	; (401018 <_usart_async_init+0xa8>)
  400fb8:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
  400fbc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  400fc0:	f3bf 8f6f 	isb	sy
	NVIC_ClearPendingIRQ((IRQn_Type)_usart_get_irq_num(hw));
  400fc4:	4620      	mov	r0, r4
  400fc6:	4b13      	ldr	r3, [pc, #76]	; (401014 <_usart_async_init+0xa4>)
  400fc8:	4798      	blx	r3
  400fca:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
  400fcc:	2b00      	cmp	r3, #0
  400fce:	db09      	blt.n	400fe4 <_usart_async_init+0x74>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400fd0:	095b      	lsrs	r3, r3, #5
  400fd2:	f000 001f 	and.w	r0, r0, #31
  400fd6:	2201      	movs	r2, #1
  400fd8:	fa02 f000 	lsl.w	r0, r2, r0
  400fdc:	3360      	adds	r3, #96	; 0x60
  400fde:	4a0e      	ldr	r2, [pc, #56]	; (401018 <_usart_async_init+0xa8>)
  400fe0:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
	NVIC_EnableIRQ((IRQn_Type)_usart_get_irq_num(hw));
  400fe4:	4620      	mov	r0, r4
  400fe6:	4b0b      	ldr	r3, [pc, #44]	; (401014 <_usart_async_init+0xa4>)
  400fe8:	4798      	blx	r3
  400fea:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
  400fec:	2b00      	cmp	r3, #0
  400fee:	dbce      	blt.n	400f8e <_usart_async_init+0x1e>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400ff0:	095b      	lsrs	r3, r3, #5
  400ff2:	f000 001f 	and.w	r0, r0, #31
  400ff6:	2201      	movs	r2, #1
  400ff8:	fa02 f000 	lsl.w	r0, r2, r0
  400ffc:	4a06      	ldr	r2, [pc, #24]	; (401018 <_usart_async_init+0xa8>)
  400ffe:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  401002:	e7c4      	b.n	400f8e <_usart_async_init+0x1e>
  401004:	00401298 	.word	0x00401298
  401008:	004009cd 	.word	0x004009cd
  40100c:	00400e39 	.word	0x00400e39
  401010:	00400da1 	.word	0x00400da1
  401014:	00400ea1 	.word	0x00400ea1
  401018:	e000e100 	.word	0xe000e100

0040101c <_usart_async_enable>:
{
  40101c:	b570      	push	{r4, r5, r6, lr}
	ASSERT(device);
  40101e:	4e0a      	ldr	r6, [pc, #40]	; (401048 <_usart_async_enable+0x2c>)
  401020:	4604      	mov	r4, r0
  401022:	f240 1213 	movw	r2, #275	; 0x113
  401026:	4631      	mov	r1, r6
  401028:	3000      	adds	r0, #0
  40102a:	bf18      	it	ne
  40102c:	2001      	movne	r0, #1
  40102e:	4d07      	ldr	r5, [pc, #28]	; (40104c <_usart_async_enable+0x30>)
  401030:	47a8      	blx	r5
	_usart_enable(device->hw);
  401032:	69a4      	ldr	r4, [r4, #24]
 *
 * \param[in] hw The pointer to hardware instance
 */
static inline void _usart_enable(void *const hw)
{
	ASSERT(hw);
  401034:	f44f 723d 	mov.w	r2, #756	; 0x2f4
  401038:	4631      	mov	r1, r6
  40103a:	1c20      	adds	r0, r4, #0
  40103c:	bf18      	it	ne
  40103e:	2001      	movne	r0, #1
  401040:	47a8      	blx	r5
  401042:	2350      	movs	r3, #80	; 0x50
  401044:	6023      	str	r3, [r4, #0]
  401046:	bd70      	pop	{r4, r5, r6, pc}
  401048:	00401298 	.word	0x00401298
  40104c:	004009cd 	.word	0x004009cd

00401050 <_usart_async_write_byte>:
{
  401050:	b538      	push	{r3, r4, r5, lr}
  401052:	460c      	mov	r4, r1
	ASSERT(device);
  401054:	4605      	mov	r5, r0
  401056:	f240 12b5 	movw	r2, #437	; 0x1b5
  40105a:	4904      	ldr	r1, [pc, #16]	; (40106c <_usart_async_write_byte+0x1c>)
  40105c:	3000      	adds	r0, #0
  40105e:	bf18      	it	ne
  401060:	2001      	movne	r0, #1
  401062:	4b03      	ldr	r3, [pc, #12]	; (401070 <_usart_async_write_byte+0x20>)
  401064:	4798      	blx	r3
	hri_usart_write_US_THR_reg(device->hw, (hri_usart_us_thr_reg_t)data);
  401066:	69ab      	ldr	r3, [r5, #24]
}

static inline void hri_usart_write_US_THR_reg(const void *const hw, hri_usart_us_thr_reg_t data)
{
	USART_CRITICAL_SECTION_ENTER();
	((Usart *)hw)->US_THR = data;
  401068:	61dc      	str	r4, [r3, #28]
  40106a:	bd38      	pop	{r3, r4, r5, pc}
  40106c:	00401298 	.word	0x00401298
  401070:	004009cd 	.word	0x004009cd

00401074 <_usart_async_enable_byte_sent_irq>:
{
  401074:	b510      	push	{r4, lr}
	ASSERT(device);
  401076:	4604      	mov	r4, r0
  401078:	f240 221d 	movw	r2, #541	; 0x21d
  40107c:	4904      	ldr	r1, [pc, #16]	; (401090 <_usart_async_enable_byte_sent_irq+0x1c>)
  40107e:	3000      	adds	r0, #0
  401080:	bf18      	it	ne
  401082:	2001      	movne	r0, #1
  401084:	4b03      	ldr	r3, [pc, #12]	; (401094 <_usart_async_enable_byte_sent_irq+0x20>)
  401086:	4798      	blx	r3
	hri_usart_set_US_IMR_TXRDY_bit(device->hw);
  401088:	69a3      	ldr	r3, [r4, #24]
	((Usart *)hw)->US_IER = US_IMR_TXRDY;
  40108a:	2202      	movs	r2, #2
  40108c:	609a      	str	r2, [r3, #8]
  40108e:	bd10      	pop	{r4, pc}
  401090:	00401298 	.word	0x00401298
  401094:	004009cd 	.word	0x004009cd

00401098 <_usart_async_enable_tx_done_irq>:
{
  401098:	b510      	push	{r4, lr}
	ASSERT(device);
  40109a:	4604      	mov	r4, r0
  40109c:	f240 2226 	movw	r2, #550	; 0x226
  4010a0:	4905      	ldr	r1, [pc, #20]	; (4010b8 <_usart_async_enable_tx_done_irq+0x20>)
  4010a2:	3000      	adds	r0, #0
  4010a4:	bf18      	it	ne
  4010a6:	2001      	movne	r0, #1
  4010a8:	4b04      	ldr	r3, [pc, #16]	; (4010bc <_usart_async_enable_tx_done_irq+0x24>)
  4010aa:	4798      	blx	r3
	hri_usart_set_US_IMR_TXEMPTY_bit(device->hw);
  4010ac:	69a3      	ldr	r3, [r4, #24]
	((Usart *)hw)->US_IER = US_IMR_TXEMPTY;
  4010ae:	f44f 7200 	mov.w	r2, #512	; 0x200
  4010b2:	609a      	str	r2, [r3, #8]
  4010b4:	bd10      	pop	{r4, pc}
  4010b6:	bf00      	nop
  4010b8:	00401298 	.word	0x00401298
  4010bc:	004009cd 	.word	0x004009cd

004010c0 <_usart_async_set_irq_state>:
{
  4010c0:	b570      	push	{r4, r5, r6, lr}
  4010c2:	460c      	mov	r4, r1
  4010c4:	4616      	mov	r6, r2
	ASSERT(device);
  4010c6:	4605      	mov	r5, r0
  4010c8:	f44f 7214 	mov.w	r2, #592	; 0x250
  4010cc:	491b      	ldr	r1, [pc, #108]	; (40113c <_usart_async_set_irq_state+0x7c>)
  4010ce:	3000      	adds	r0, #0
  4010d0:	bf18      	it	ne
  4010d2:	2001      	movne	r0, #1
  4010d4:	4b1a      	ldr	r3, [pc, #104]	; (401140 <_usart_async_set_irq_state+0x80>)
  4010d6:	4798      	blx	r3
	if (state) {
  4010d8:	b1c6      	cbz	r6, 40110c <_usart_async_set_irq_state+0x4c>
		if (USART_ASYNC_BYTE_SENT == type || USART_ASYNC_TX_DONE == type) {
  4010da:	2c02      	cmp	r4, #2
  4010dc:	bf18      	it	ne
  4010de:	2c00      	cmpne	r4, #0
  4010e0:	d004      	beq.n	4010ec <_usart_async_set_irq_state+0x2c>
		} else if (USART_ASYNC_RX_DONE == type) {
  4010e2:	2c01      	cmp	r4, #1
  4010e4:	d00a      	beq.n	4010fc <_usart_async_set_irq_state+0x3c>
		} else if (USART_ASYNC_ERROR == type) {
  4010e6:	2c03      	cmp	r4, #3
  4010e8:	d00c      	beq.n	401104 <_usart_async_set_irq_state+0x44>
  4010ea:	bd70      	pop	{r4, r5, r6, pc}
			hri_usart_set_US_IMR_TXRDY_bit(device->hw);
  4010ec:	69ab      	ldr	r3, [r5, #24]
	((Usart *)hw)->US_IER = US_IMR_TXRDY;
  4010ee:	2202      	movs	r2, #2
  4010f0:	609a      	str	r2, [r3, #8]
			hri_usart_set_US_IMR_TXEMPTY_bit(device->hw);
  4010f2:	69ab      	ldr	r3, [r5, #24]
	((Usart *)hw)->US_IER = US_IMR_TXEMPTY;
  4010f4:	f44f 7200 	mov.w	r2, #512	; 0x200
  4010f8:	609a      	str	r2, [r3, #8]
  4010fa:	bd70      	pop	{r4, r5, r6, pc}
			hri_usart_set_US_IMR_RXRDY_bit(device->hw);
  4010fc:	69ab      	ldr	r3, [r5, #24]
	((Usart *)hw)->US_IER = US_IMR_RXRDY;
  4010fe:	2201      	movs	r2, #1
  401100:	609a      	str	r2, [r3, #8]
  401102:	bd70      	pop	{r4, r5, r6, pc}
			    device->hw, US_CSR_OVRE | US_CSR_USART_LIN_FRAME | US_CSR_USART_LIN_PARE | US_CSR_USART_MANERR);
  401104:	69ab      	ldr	r3, [r5, #24]
	((Usart *)hw)->US_IER = mask;
  401106:	4a0f      	ldr	r2, [pc, #60]	; (401144 <_usart_async_set_irq_state+0x84>)
  401108:	609a      	str	r2, [r3, #8]
  40110a:	bd70      	pop	{r4, r5, r6, pc}
		if (USART_ASYNC_BYTE_SENT == type || USART_ASYNC_TX_DONE == type) {
  40110c:	2c02      	cmp	r4, #2
  40110e:	bf18      	it	ne
  401110:	2c00      	cmpne	r4, #0
  401112:	d007      	beq.n	401124 <_usart_async_set_irq_state+0x64>
		} else if (USART_ASYNC_RX_DONE == type) {
  401114:	2c01      	cmp	r4, #1
  401116:	d00d      	beq.n	401134 <_usart_async_set_irq_state+0x74>
		} else if (USART_ASYNC_ERROR == type) {
  401118:	2c03      	cmp	r4, #3
  40111a:	d1e6      	bne.n	4010ea <_usart_async_set_irq_state+0x2a>
			    device->hw, US_CSR_OVRE | US_CSR_USART_LIN_FRAME | US_CSR_USART_LIN_PARE | US_CSR_USART_MANERR);
  40111c:	69ab      	ldr	r3, [r5, #24]
	((Usart *)hw)->US_IDR = mask;
  40111e:	4a09      	ldr	r2, [pc, #36]	; (401144 <_usart_async_set_irq_state+0x84>)
  401120:	60da      	str	r2, [r3, #12]
}
  401122:	e7e2      	b.n	4010ea <_usart_async_set_irq_state+0x2a>
			hri_usart_clear_US_IMR_TXRDY_bit(device->hw);
  401124:	69ab      	ldr	r3, [r5, #24]
	((Usart *)hw)->US_IDR = US_IMR_TXRDY;
  401126:	2202      	movs	r2, #2
  401128:	60da      	str	r2, [r3, #12]
			hri_usart_clear_US_IMR_TXEMPTY_bit(device->hw);
  40112a:	69ab      	ldr	r3, [r5, #24]
	((Usart *)hw)->US_IDR = US_IMR_TXEMPTY;
  40112c:	f44f 7200 	mov.w	r2, #512	; 0x200
  401130:	60da      	str	r2, [r3, #12]
  401132:	bd70      	pop	{r4, r5, r6, pc}
			hri_usart_clear_US_IMR_RXRDY_bit(device->hw);
  401134:	69ab      	ldr	r3, [r5, #24]
	((Usart *)hw)->US_IDR = US_IMR_RXRDY;
  401136:	2201      	movs	r2, #1
  401138:	60da      	str	r2, [r3, #12]
  40113a:	bd70      	pop	{r4, r5, r6, pc}
  40113c:	00401298 	.word	0x00401298
  401140:	004009cd 	.word	0x004009cd
  401144:	010000e0 	.word	0x010000e0

00401148 <_usart_get_usart_async>:
}
  401148:	2000      	movs	r0, #0
  40114a:	4770      	bx	lr

0040114c <USART1_Handler>:
{
  40114c:	b508      	push	{r3, lr}
	_usart_interrupt_handler(_usart1_dev);
  40114e:	4b02      	ldr	r3, [pc, #8]	; (401158 <USART1_Handler+0xc>)
  401150:	6818      	ldr	r0, [r3, #0]
  401152:	4b02      	ldr	r3, [pc, #8]	; (40115c <USART1_Handler+0x10>)
  401154:	4798      	blx	r3
  401156:	bd08      	pop	{r3, pc}
  401158:	2040007c 	.word	0x2040007c
  40115c:	00400ecd 	.word	0x00400ecd

00401160 <__libc_init_array>:
  401160:	b570      	push	{r4, r5, r6, lr}
  401162:	4e0d      	ldr	r6, [pc, #52]	; (401198 <__libc_init_array+0x38>)
  401164:	4c0d      	ldr	r4, [pc, #52]	; (40119c <__libc_init_array+0x3c>)
  401166:	1ba4      	subs	r4, r4, r6
  401168:	10a4      	asrs	r4, r4, #2
  40116a:	2500      	movs	r5, #0
  40116c:	42a5      	cmp	r5, r4
  40116e:	d109      	bne.n	401184 <__libc_init_array+0x24>
  401170:	4e0b      	ldr	r6, [pc, #44]	; (4011a0 <__libc_init_array+0x40>)
  401172:	4c0c      	ldr	r4, [pc, #48]	; (4011a4 <__libc_init_array+0x44>)
  401174:	f000 f89e 	bl	4012b4 <_init>
  401178:	1ba4      	subs	r4, r4, r6
  40117a:	10a4      	asrs	r4, r4, #2
  40117c:	2500      	movs	r5, #0
  40117e:	42a5      	cmp	r5, r4
  401180:	d105      	bne.n	40118e <__libc_init_array+0x2e>
  401182:	bd70      	pop	{r4, r5, r6, pc}
  401184:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
  401188:	4798      	blx	r3
  40118a:	3501      	adds	r5, #1
  40118c:	e7ee      	b.n	40116c <__libc_init_array+0xc>
  40118e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
  401192:	4798      	blx	r3
  401194:	3501      	adds	r5, #1
  401196:	e7f2      	b.n	40117e <__libc_init_array+0x1e>
  401198:	004012c0 	.word	0x004012c0
  40119c:	004012c0 	.word	0x004012c0
  4011a0:	004012c0 	.word	0x004012c0
  4011a4:	004012c4 	.word	0x004012c4

004011a8 <strlen>:
  4011a8:	4603      	mov	r3, r0
  4011aa:	f813 2b01 	ldrb.w	r2, [r3], #1
  4011ae:	2a00      	cmp	r2, #0
  4011b0:	d1fb      	bne.n	4011aa <strlen+0x2>
  4011b2:	1a18      	subs	r0, r3, r0
  4011b4:	3801      	subs	r0, #1
  4011b6:	4770      	bx	lr
  4011b8:	6e490a0d 	.word	0x6e490a0d
  4011bc:	72726574 	.word	0x72726574
  4011c0:	69747075 	.word	0x69747075
  4011c4:	0d216e6f 	.word	0x0d216e6f
  4011c8:	0000000a 	.word	0x0000000a
  4011cc:	00000820 	.word	0x00000820
  4011d0:	00000a0d 	.word	0x00000a0d
  4011d4:	68746977 	.word	0x68746977
  4011d8:	6c206e69 	.word	0x6c206e69
  4011dc:	2e706f6f 	.word	0x2e706f6f
  4011e0:	0a0d2e2e 	.word	0x0a0d2e2e
  4011e4:	00000000 	.word	0x00000000
  4011e8:	682f2e2e 	.word	0x682f2e2e
  4011ec:	732f6c61 	.word	0x732f6c61
  4011f0:	682f6372 	.word	0x682f6372
  4011f4:	695f6c61 	.word	0x695f6c61
  4011f8:	00632e6f 	.word	0x00632e6f
  4011fc:	682f2e2e 	.word	0x682f2e2e
  401200:	732f6c61 	.word	0x732f6c61
  401204:	682f6372 	.word	0x682f6372
  401208:	745f6c61 	.word	0x745f6c61
  40120c:	72656d69 	.word	0x72656d69
  401210:	0000632e 	.word	0x0000632e
  401214:	682f2e2e 	.word	0x682f2e2e
  401218:	732f6c61 	.word	0x732f6c61
  40121c:	682f6372 	.word	0x682f6372
  401220:	755f6c61 	.word	0x755f6c61
  401224:	74726173 	.word	0x74726173
  401228:	7973615f 	.word	0x7973615f
  40122c:	632e636e 	.word	0x632e636e
  401230:	00000000 	.word	0x00000000
  401234:	682f2e2e 	.word	0x682f2e2e
  401238:	752f6c61 	.word	0x752f6c61
  40123c:	736c6974 	.word	0x736c6974
  401240:	6372732f 	.word	0x6372732f
  401244:	6974752f 	.word	0x6974752f
  401248:	6c5f736c 	.word	0x6c5f736c
  40124c:	2e747369 	.word	0x2e747369
  401250:	00000063 	.word	0x00000063
  401254:	682f2e2e 	.word	0x682f2e2e
  401258:	752f6c61 	.word	0x752f6c61
  40125c:	736c6974 	.word	0x736c6974
  401260:	6372732f 	.word	0x6372732f
  401264:	6974752f 	.word	0x6974752f
  401268:	725f736c 	.word	0x725f736c
  40126c:	62676e69 	.word	0x62676e69
  401270:	65666675 	.word	0x65666675
  401274:	00632e72 	.word	0x00632e72
  401278:	682f2e2e 	.word	0x682f2e2e
  40127c:	742f6c70 	.word	0x742f6c70
  401280:	70682f63 	.word	0x70682f63
  401284:	63745f6c 	.word	0x63745f6c
  401288:	0000632e 	.word	0x0000632e

0040128c <_usarts>:
  40128c:	00000001 001008c0 000403d0 682f2e2e     ............../h
  40129c:	752f6c70 74726173 6c70682f 6173755f     pl/usart/hpl_usa
  4012ac:	632e7472 00000000                       rt.c....

004012b4 <_init>:
  4012b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4012b6:	bf00      	nop
  4012b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
  4012ba:	bc08      	pop	{r3}
  4012bc:	469e      	mov	lr, r3
  4012be:	4770      	bx	lr

004012c0 <__init_array_start>:
  4012c0:	0040018d 	.word	0x0040018d

004012c4 <_fini>:
  4012c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4012c6:	bf00      	nop
  4012c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
  4012ca:	bc08      	pop	{r3}
  4012cc:	469e      	mov	lr, r3
  4012ce:	4770      	bx	lr

004012d0 <__fini_array_start>:
  4012d0:	00400169 	.word	0x00400169
